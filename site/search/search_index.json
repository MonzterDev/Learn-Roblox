{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"about/","title":"About Learn Roblox","text":"<p>Upon joining the Roblox Development Community, I realized there aren't any extensively insightful resources for Modern-Day Game Development on the Platform.</p> <p>This isn't to discredit any of the Learning Resources which do currently exist such as Roblox's Guides. In a way, this is to expand upon them.</p> <p>Roblox's Guides are useful for brand new Developers, but some of the Guides are also flawed in a few ways:</p> <ul> <li>Not following best practices</li> <li>Outdated</li> <li>Poor demonstrations or examples</li> <li>Not giving enough details on a topic</li> </ul> <p>With those flaws in mind, we strive to help Developers of any age, learn how to develop on the Roblox Platform! We have courses which go through step-by-step, creating the most popular Roblox Gamemodes such as Simulators, Tycoons, FPS, &amp; more!</p>"},{"location":"courses/creating-a-basic-obby/","title":"Index","text":""},{"location":"courses/creating-a-basic-obby/#course-description","title":"Course Description","text":"<p>This course is constructed for beginners who have little to no knowledge about developing on Roblox! We'll be going step-by-step on how to create, construct, and publish your first project using Roblox Studio.</p>"},{"location":"courses/creating-a-basic-obby/#prerequisits","title":"Prerequisits","text":"<ul> <li>Roblox Studio</li> </ul>"},{"location":"courses/creating-a-basic-obby/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to create new Projects in Studio from Templates</li> <li>How to add and manipulate Parts to your Project</li> <li>How to construct an Obsticle Course using Parts</li> <li>How to publish your first Project</li> </ul>"},{"location":"courses/creating-a-basic-obby/1-creating-a-new-project/","title":"1. Creating a New Project","text":"<p>Upon launching Roblox Studio you should be met with the same screen as the image below!</p> <p></p> <p>Warning</p> <p>If you do not see this screen, make sure you have selected <code>\u2795 New</code> tab!</p>"},{"location":"courses/creating-a-basic-obby/1-creating-a-new-project/#creating-the-game","title":"Creating the Game","text":"<ol> <li>Click the Baseplate Template</li> </ol> <p>This will launch us into a new Workspace!</p>"},{"location":"courses/creating-a-basic-obby/1-creating-a-new-project/#saving-publishing-the-game","title":"Saving &amp; Publishing the Game","text":"<p>We should now save and publish the project to Roblox, so we don't lose it.</p> <ol> <li>Select the <code>HOME</code> tab in the menu bar (1)</li> <li>Click the <code>Game settings</code> button in the ribbon bar (2)</li> </ol> <ol> <li>Checkout the Studio Layout Diagram to further understand the layout! </li> <li>Checkout the Studio Layout Diagram to further understand the layout! </li> </ol> <p></p> <ol> <li>Click the <code>Save to Roblox</code> button</li> <li>Change the \"Name\" field to whatever you want, and click the <code>Save</code> button</li> </ol> <p></p>"},{"location":"courses/creating-a-basic-obby/2-creating-some-jumps/","title":"2. Creating Some Jumps","text":"<p>Lets add some jumps which lead to a new checkpoint for us to reach!</p>"},{"location":"courses/creating-a-basic-obby/2-creating-some-jumps/#removing-the-baseplate","title":"Removing the Baseplate","text":"<p>We should delete the part called \"Baseplate\" from our Workspace, so a Player will fall to their death if they miss a jump!</p> <ol> <li>Expand the Workspace Service inside of the Explorer</li> <li>Click the Part named \"Baseplate\"</li> <li>Right-Click and Click \"Delete\" OR press <code>Del</code> on your keyboard</li> </ol> <p>Your Workspace should now look the same as the one below. </p>"},{"location":"courses/creating-a-basic-obby/2-creating-some-jumps/#creating-a-jump-part","title":"Creating a Jump Part","text":"<p>We'll create a simple Part, which will be a jump in our Obby. Once we create the Part with all the properties we like, we'll duplicate it and create more jumps!</p>"},{"location":"courses/creating-a-basic-obby/2-creating-some-jumps/#adding-a-part","title":"Adding a Part","text":"<ol> <li>Hover over Workspace and towards the right, click the <code>\u2795</code> Icon</li> <li>Search for OR click \"Part\"</li> </ol>"},{"location":"courses/creating-a-basic-obby/2-creating-some-jumps/#customizing-the-part","title":"Customizing the Part","text":"<ol> <li>Inside the Workspace, click the new Part object named \"Part\"</li> <li>Set the <code>Anchored</code> property to <code>true</code> (Tick the box)</li> <li>Resize the Part to be nearly as wide as the SpawnLocation</li> <li>Move the Part away from the SpawnLocation requiring the player to jump to reach it</li> <li>Rename the Part to \"Jump\"</li> </ol> <p>Info</p> <ul> <li><code>Anchored</code> prevents the Part from being affected by gravity, so it will not fall down.</li> <li>You can resize the part by going into the <code>MODEL</code> tab and selecting <code>Scale</code> OR press <code>Ctrl+3</code> on your keyboard</li> <li>You can rename the part by Right-Clicking on the part and clicking \"Rename\" OR press <code>F2</code> on your keyboard</li> </ul> <p>Your game should look similar to the image below. </p>"},{"location":"courses/creating-a-basic-obby/2-creating-some-jumps/#adding-more-jumps","title":"Adding more Jumps","text":"<p>We'll now add more Jumps to our game by duplicating the Jump part we created.</p> <ol> <li>Duplicate the Jump part</li> <li>Move the new Jump further infront of the original Jump part</li> <li>Repeat this 3 more times, until you have 5 Jumps</li> </ol> <p>Info</p> <ul> <li>You can duplicate the part by Right-Clicking on the part and clicking \"Duplicate\" OR press <code>Ctrl+D</code> on your keyboard</li> <li>Duplicating allows us to retain all the same properties of the Part. For example, we'll keep the size property, which is useful here.</li> </ul> <p>Your game should look similar to the image below. </p>"},{"location":"courses/creating-a-basic-obby/3-creating-checkpoints/","title":"3. Creating Checkpoints","text":"<p>Whenever a player passes through a certain amount of Jumps, we should add a Checkpoint, which will change their respawn location if they fall.</p>"},{"location":"courses/creating-a-basic-obby/3-creating-checkpoints/#creating-a-new-spawn-location","title":"Creating a new Spawn Location","text":""},{"location":"courses/creating-a-basic-obby/3-creating-checkpoints/#adding-the-spawn-location","title":"Adding the Spawn Location","text":"<p>Similar to how we added our first Jump Part, we'll do the same process to add a Spawn Location Part!</p> <ol> <li>Hover over Workspace and towards the right, click the <code>\u2795</code> Icon</li> <li>Search for OR click \"SpawnLocation\"</li> </ol>"},{"location":"courses/creating-a-basic-obby/3-creating-checkpoints/#customizing-the-spawn-location","title":"Customizing the Spawn Location","text":"<ol> <li>Position the new Spawn Location part towards the end of our current Jumps</li> <li>Set the <code>BrickColor</code> property to <code>Lime Green</code></li> <li>Set the <code>AllowTeamChangeOnTouch</code> property to <code>true</code></li> <li>Set the <code>Neutral</code> property to <code>false</code></li> <li>Set the <code>TeamColor</code> property to <code>Lime Green</code></li> <li>Set the <code>Name</code> property to <code>SpawnLocation2</code></li> </ol> <p>Whenever a Player touches the Spawn Location part, their Team will be changed to our define <code>TeamColor</code> which is <code>Lime Green</code>. When we set <code>Neutral</code> to <code>false</code>, this now only allows Players of the defined <code>TeamColor</code> to respawn at that location.</p> <p></p>"},{"location":"courses/creating-a-basic-obby/3-creating-checkpoints/#setting-up-the-players-team","title":"Setting up the Player's Team","text":"<p>Since we just added another SpawnLocation, we must assign the Player a default Team, and modify the first SpawnLocation.</p> <p>Teams are a basic service provided by Roblox, which allows us to easily group Players together and do certain things for each team, like set their respawn location.</p> <ol> <li>Within the Explorer locate the Teams Service</li> <li>Add a new Team Object to the Teams Service</li> <li>Set the <code>AutoAssignable</code> property to <code>true</code></li> <li>Set the <code>TeamColor</code> property to <code>White</code></li> <li>Set the <code>Name</code> property to <code>White</code></li> </ol> <p></p>"},{"location":"courses/creating-a-basic-obby/3-creating-checkpoints/#modifying-the-origianl-spawn-location","title":"Modifying the Origianl Spawn Location","text":"<p>Since we've setup the default Team, we must modify the original SpawnLocation Part which will set the Player's first respawn location.</p> <ol> <li>Select the original SpawnLocation Part</li> <li>Set the <code>Neutral</code> property to <code>false</code></li> <li>Set the <code>TeamColor</code> property to <code>White</code></li> </ol> <p>Important</p> <p>The default Team's <code>TeamColor</code> must match the SpawnLocation's <code>TeamColor</code>, otherwise no spawn location will be set for the Player</p>"},{"location":"courses/creating-a-basic-obby/3-creating-checkpoints/#adding-additional-teams","title":"Adding Additional Teams","text":"<p>Each time we add a new Checkpoint, we should add a new Team since it's displayed in the Leaderstats for everyone to see. Lets add a new Team for our first Checkpoint.</p> <ol> <li>Add a new Team Object to the Teams Service</li> <li>Set the <code>AutoAssignable</code> property to <code>false</code></li> <li>Set the <code>TeamColor</code> property to <code>Lime Green</code> (Must be the same color as the Checkpoint's <code>TeamColor</code>)</li> <li>Set the <code>Name</code> property to <code>Lime Green</code></li> </ol>"},{"location":"courses/creating-a-basic-obby/4-adding-invisible-jumps/","title":"4. Adding Invisible Jumps","text":"<p>Currently we only have basic Jumps, but lets add some invisible ones to spice things up!</p>"},{"location":"courses/creating-a-basic-obby/4-adding-invisible-jumps/#creating-the-invisible-jump","title":"Creating the Invisible Jump","text":"<p>We already created some basics Jumps, and we want to create our new Jumps with the same size &amp; shape. Rather than creating entirely new Jumps, we'll duplicate our existing ones</p> <ol> <li>Duplicate one of our existing Jump Parts</li> <li>Rename the new Jump to \"InvisibleJump\"</li> <li>Position the new Jump to the right of our 2nd Spawn Location</li> <li>Rotate the new Jump 90 degrees by using <code>Ctrl + R</code></li> <li>Set the <code>Transparency</code> property of the new Jump to <code>1</code></li> </ol> <p></p>"},{"location":"courses/creating-a-basic-obby/4-adding-invisible-jumps/#adding-more-invisible-jumps","title":"Adding more Invisible Jumps","text":"<p>Lets add 4 more Invisible Jumps which lead to a new Spawn Location checkpoint!</p> <ol> <li>Duplicate the existing InvisibleJump Part</li> <li>Position the new InvisibleJump slightly infront of the previous InvisibleJump</li> <li>Repeat this process 3 more times, until you have a total of 5 InvisibleJump Parts</li> </ol> <p>Info</p> <p>If you're having trouble lining your InvisibleJump Parts up, you can set their Transparency to 0 so you can temporarily see them.</p> <p>Remember to set their Transparency back to 1 once you finish lining them all up!</p> <p></p>"},{"location":"courses/creating-a-basic-obby/4-adding-invisible-jumps/#adding-another-checkpoint","title":"Adding another Checkpoint","text":"<p>Since we now have 5 new challenging Jumps for the Player to cross, lets add a new Checkpoint at the end of them!</p> <ol> <li>Duplicate the existing SpawnLocation2 Part</li> <li>Position it slightly further than the furthest InvisibleJump Part</li> <li>Set the <code>BrickColor</code> property to <code>Really Red</code></li> <li>Set the <code>TeamColor</code> property to <code>Really Red</code></li> <li>Set the <code>Name</code> property to <code>SpawnLocation3</code></li> </ol>"},{"location":"courses/creating-a-basic-obby/4-adding-invisible-jumps/#creating-the-new-team","title":"Creating the new Team","text":"<p>Remember, we should create a new Team Object each time we add a new Checkpoint.</p> <ol> <li>Duplicate the <code>Lime Green</code> Team</li> <li>Set the <code>TeamColor</code> property to <code>Really Red</code> (Must be the same color as the Checkpoint's <code>TeamColor</code>)</li> <li>Set the <code>Name</code> property to <code>Really Red</code></li> </ol> <p></p>"},{"location":"courses/creating-a-basic-obby/5-adding-fake-walls/","title":"5. Adding Fake Walls","text":"<p>Lets add some walls, which Player can walk through, to complement our Jump obstacles!</p>"},{"location":"courses/creating-a-basic-obby/5-adding-fake-walls/#creating-the-fake-wall","title":"Creating the Fake Wall","text":"<p>We'll create a basic wall, which the Player will think they must jump around it, but really they can walk right through it!</p> <ol> <li>Create a new Part within the Workspace</li> <li>Rename the new Part to \"FakeWall\"</li> <li>Resize the wall so it's at least taller than the Player</li> <li>Resize the wall to it's as wide as a Jump</li> <li>Set the <code>Anchored</code> property of the Part to <code>true</code></li> <li>Set the <code>CanCollide</code> property of the Part to <code>false</code></li> <li>Set the <code>Transparency</code> property of the Part to <code>0.2</code></li> </ol> <p>Info</p> <p>Disabling collisions on a Part will allow other Parts (in this case a Player) to move through it!</p> <p></p>"},{"location":"courses/creating-a-basic-obby/5-adding-fake-walls/#adding-jumps","title":"Adding Jumps","text":"<p>Lets use the 5 jumps between SpawnLocation and SpawnLocation2 to easily make jumps for our newest path!</p> <ol> <li>Select the 5 jumps between SpawnLocation and SpawnLocation2</li> <li>Duplicate these selected jumps using <code>Ctrl + D</code></li> <li>Move the duplicated jumps to the latest checkpoint</li> </ol> <p></p>"},{"location":"courses/creating-a-basic-obby/5-adding-fake-walls/#inserting-the-fake-wall","title":"Inserting the Fake Wall","text":"<p>Now that we have our Jumps positioned, lets create more FakeWalls and add them between the Jumps!</p> <ol> <li>Move the FakeWall between SpawnLocation3 and its first Jump</li> <li>Duplicate the FakeWall and move it between the next Jumps</li> <li>Repeat this proccess until all Jumps have a FakeWall between them</li> </ol> <p></p>"},{"location":"courses/creating-a-basic-obby/5-adding-fake-walls/#adding-the-next-checkpoint","title":"Adding the Next Checkpoint","text":"<ol> <li>Duplicate the existing SpawnLocation3 Part</li> <li>Position it slightly further than the furthest Jump we just setup</li> <li>Set the <code>BrickColor</code> property to <code>New Yeller</code></li> <li>Set the <code>TeamColor</code> property to <code>New Yeller</code></li> <li>Set the <code>Name</code> property to <code>SpawnLocation4</code></li> </ol> <p>Remember, we should create a new Team Object each time we add a new Checkpoint.</p> <ol> <li>Duplicate the <code>Really Red</code> Team</li> <li>Set the <code>TeamColor</code> property to <code>New Yeller</code> (Must be the same color as the Checkpoint's <code>TeamColor</code>)</li> <li>Set the <code>Name</code> property to <code>New Yeller</code></li> </ol> <p></p>"},{"location":"courses/roblox-studio-basics/","title":"What is Roblox Studio","text":"<p>Roblox Studio is the free and official development software created by Roblox, used to create Roblox Games.</p> <p>Studio enables us to do every aspect of Development, including: Scripting, Modeling, Building, and much more!</p>"},{"location":"courses/roblox-studio-basics/creating-a-new-place/","title":"Learning the Startup Interface","text":"<p>Upon luanching Studio for the first time, you should be met with a screen similar to the image below.</p> <p></p> <p>On the left side of the screen there are four navigation buttons.</p> Button Description <code>\u2795 New</code> Displays templates for fast Game creation <code>\ud83d\udcbc My Games</code> Displays the Games you or your group own or have permission to access <code>\ud83d\udd52 Recent</code> Displays the Games you recently opened or worked on <code>\ud83d\uddc4 Archive</code> Displays Games you previously archived"},{"location":"courses/roblox-studio-basics/creating-a-new-place/#creating-a-new-game","title":"Creating a New Game","text":"<p>To create a new Game, we want to be on the <code>\u2795 New</code> tab, which displays a few template Games we can choose from.</p> <ol> <li>Select the Baseplate template</li> </ol> <p></p> <p>Studio will then open the Baseplate template and your screen should look similar to the image below.</p> <p></p>"},{"location":"courses/rojo/installation/","title":"1. Installation","text":""},{"location":"courses/rojo/installation/#visual-studio-code","title":"Visual Studio Code","text":"<p>Before using Rojo, you must install Visual Studio Code which is an extremely useful Code Editor. You can download Visual Studio Code from here.</p> <p>Warning</p> <p>Make sure you install Visual Studio Code, not Visual Studio as these are two different programs!</p>"},{"location":"courses/rojo/installation/#installation","title":"Installation","text":""},{"location":"courses/rojo/installation/#visual-studio-code-extension","title":"Visual Studio Code Extension","text":"<p>Once you have Visual Studio Code, you can get the Rojo Extension here. Simply click \"Install\" and this should open the Rojo Extension directly in Visual Studio Code, allowing you to easily install it.</p>"},{"location":"courses/rojo/installation/#roblox-studio-plugin","title":"Roblox Studio Plugin","text":"<p>There doesn't seem to be an official download link for the latest Rojo Plugin, but you can always find it on the creator's (LPGhatguy) page here!</p> <p>At the time of writing this, the latest version is Rojo 7, which can be downloaded here.</p>"},{"location":"courses/scripting/introduction-to-scripting/","title":"What is Luau","text":"<p>Luau is the only scripting language used to develop Roblox games. It's maintained solely by Roblox, but is a fork of the popular scripting language Lua.</p> <p>It was created by Roblox due to all the changes they made to fit the platform.</p> <p>From a Developer's perspective, it's written nearly identical to Lua. Roblox also focuses on compatibility with Lua when making changes.</p> <p>If you wish to learn more about Luau or Lua, you can browse their official sites for insightful information and helpful guides!</p> <p>Additionally, this course takes inspiration from and expands upon a few of the following resources:</p> <ul> <li>Roblox Developer Articles</li> <li>Lua Manual</li> </ul>"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/","title":"Creating a Script","text":""},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#what-is-a-script","title":"What is a Script","text":"<p>Similar to the Command Bar we used to run our code in the previous chapter, Scripts are the primary way of running code!</p> <p>There are 3 types of Scripts:</p> Types Description <code>Server Script</code> Controlled and ran by the server aka our game <code>Local Script</code> Controlled and ran by the client aka the player <code>Module Script</code> Controlled by either the server or client <p>Note</p> <ul> <li>Server Scripts are also commonly referred to as just Scripts</li> <li>Module Scripts are more complex, so we won't be incorporating or discussing them much until later in the course</li> </ul>"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#where-do-we-put-scripts","title":"Where Do We Put Scripts","text":"<p>Before we create a script we should get a general understanding of where to put our Local &amp; Server scripts.</p>"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#what-are-services","title":"What are Services","text":"<p>If we look inside of our Explorer we can many Services listed. Each service provides some usage for us, especially when scripting.</p> <p></p> <p>Here are a few examples that should make it easier to understand Services:</p> <ul> <li>Workspace: Contains any objects that are to be rendered in the 3D world</li> <li>Players: Contains Player objects for presently connected clients to a Roblox game server</li> <li>Lighting: Controls the environmental lighting in a game</li> </ul> <p>If you look inside the Workspace service within your Explorer you should see a few parts which include the <code>Baseplate</code> &amp; <code>SpawnPoint</code> You can see these parts displayed directly in your Game's world currently.</p> <p>Whenever a player joins our game, the Players service will generate and hold a Player object with that specific player's data. This is extremely useful in scripting.</p> <p>You can also think of Services as a Folder. You expanded the Workspace service and saw a few parts inside of it, you could also do the same with Lighting and see objects inside of it as well.</p>"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#which-services-should-contain-scripts","title":"Which Services Should Contain Scripts","text":"<p>While you could store a Server Script in nearly any service and it would still function, the ServerScriptService is the primary service for this.</p> <p>Local Scripts on the other hand need to be loaded by a client aka player to run. The ServerScriptService cannot be accessed by players, so you wouldn't normally store a Local Script there. The StarterPlayer/StarterPlayerScripts service is the primary service to store Local Scripts as that is its purpose. The Workspace, StarterPack, &amp; StarterGui services are also commonly used to hold Local Scripts.</p> <p>The table reflects what we talked about above.</p> Services Script Types <code>Workspace</code>  Local <code>ServerScriptService</code>  Server <code>StarterGui</code>  Local <code>StarterPack</code>  Local <code>StarterPlayer/StarterPlayerScripts</code>  Local"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#creating-a-server-script","title":"Creating a Server Script","text":"<ol> <li>Put your Mouse over the ServerScriptService within the Explorer</li> <li>Click the  icon to the right of the ServerScriptService name</li> <li>Search for \"Script\" in the popup box</li> <li>Click the <code>Script</code> button</li> </ol> <p>Within ServerScriptService you should see the new Server Script which is named <code>Script</code>.</p> <p></p>"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#what-we-learned","title":"What we Learned","text":"<p>What we Learned</p> <ul> <li>Basic understanding of what a Script is</li> <li>The 3 types of Scripts</li> <li>Where Scripts can be stored</li> <li>Very basic understanding of a Service</li> <li>How to create a Script</li> </ul>"},{"location":"courses/scripting/introduction-to-scripting/data-types/","title":"Data Types","text":""},{"location":"courses/scripting/introduction-to-scripting/data-types/#what-are-data-types","title":"What are Data Types","text":"<p>Data Types are the classifications we use to specify what type of value a piece of data is. Roblox itself contains many data types which you'll learn about throughout this course and on your own, but we'll go over the basic Luau ones in this chapter.</p>"},{"location":"courses/scripting/introduction-to-scripting/data-types/#basic-luau-data-types","title":"Basic Luau Data Types","text":""},{"location":"courses/scripting/introduction-to-scripting/data-types/#number","title":"number","text":"<p>Any number including both whole numbers and decimals. Example<pre><code>print(1)\nprint(1.5)\nprint(.5)\n</code></pre></p>"},{"location":"courses/scripting/introduction-to-scripting/data-types/#string","title":"string","text":"<p>Any combination of characters surrounded by double quotes. Example<pre><code>print(\"Hi\")\nprint(\"I have 1.5 dollars\")\nprint(\"\")\n</code></pre></p>"},{"location":"courses/scripting/introduction-to-scripting/data-types/#boolean","title":"boolean","text":"<p>There are only two possible values for a boolean, either true or false. You can think of these as the answer \"yes\" or \"no\" to a question. Example<pre><code>print(true)\nprint(false)\n</code></pre></p>"},{"location":"courses/scripting/introduction-to-scripting/data-types/#nil","title":"nil","text":"<p>nil means doesn't exist. You can also think of the word \"nothing.\" Example<pre><code>print(nil)\n</code></pre></p>"},{"location":"courses/scripting/introduction-to-scripting/data-types/#what-we-learned","title":"What we Learned","text":"<p>What we Learned</p> <ul> <li>What are Data Types</li> <li>The 4 basic Luau Data Types</li> </ul>"},{"location":"courses/scripting/introduction-to-scripting/output/","title":"Output","text":""},{"location":"courses/scripting/introduction-to-scripting/output/#what-is-the-output","title":"What is the Output","text":"<p>The Output is where the most important information will be displayed from our scripts! We'll constantly be using the output to view errors and debug our code.</p> <p>You should see the Output tab at the bottom of your Studio window.</p> <p></p> Don't see the Output tab? <p>If you do not see the Output tab, click on the <code>VIEW</code> button at the top of Studio, then click the <code>\ud83d\uddbc Output</code> button to enable it.</p>"},{"location":"courses/scripting/introduction-to-scripting/output/#the-command-bar","title":"The Command Bar","text":"<p>The Command Bar can be used as another method of running code similar to scripts! The code written within the command bar is usually a small task or meant for testing.</p> <p>You should see the Command Bar tab at the bottom of your Studio window, directly below the Output tab.</p> <p></p> Don't see the Command Bar tab? <p>If you do not see the Command Bar tab, click on the <code>VIEW</code> button at the top of Studio, then click the <code>\ud83d\uddbc Command Bar</code> button to enable it.</p>"},{"location":"courses/scripting/introduction-to-scripting/output/#printing-to-the-output","title":"Printing to the Output","text":"<p>What you're about to learn will be one of the most commonly used knowledge throughout your entire scripting journey! We can send a message to the Output by using the Command Bar.</p> <p>Type the text below into your Command Bar and hit enter:</p> Command BarOutput <pre><code>print(\"Hey, I did it!\")\n</code></pre> <pre><code>19:44:39.754  &gt; print(\"Hey, I did it!\") -  Studio\n19:44:39.755  Hey, I did it!  -  Edit\n</code></pre> <p>Upon hitting Enter, you should see a similar message appear in your Output as displayed in the Output tab above!</p>"},{"location":"courses/scripting/introduction-to-scripting/output/#understanding-the-output","title":"Understanding the Output","text":"<p>The Output message is made up of a few components:</p> Component Example Usage <code>Timestamp</code> 19:44:39.755 Indicates the time in the 24-hour format when the message was output <code>Message</code> Hey, I did it! The information to be displayed in the Output <code>Source</code> Studio The source of the print() call. Usually <code>Client</code> or <code>Server</code> <code>Script Name</code> Not Displayed The name of the Script which triggered the message to be sent <code>Line #</code> Not Displayed The line within a Script which triggered the message to be sent <p>The timestamp will be different for you because the timestamp is based on your current time in the 24-hour format. Since I'm in the Eastern Standard Timezone the Output was triggered at <code>7:44:39.754PM</code>, which in the 24-hour format is <code>19:44:39.755</code>.</p> <p>The source was Studio because we used the <code>print()</code> function in our Command Bar. Usually the source would be Client if you're using <code>print()</code> in a LocalScript or Server from a ServerScript.</p> <p>Since we used the Command Bar instead of a Script, no <code>Line #</code> was displayed. Whenever there is output from a Script the last part of the output will be a number that indicates the line that caused the output.</p> <p>Congratulations you can now call yourself a scripter as you just wrote your first line of code and used the <code>print()</code> function!</p>"},{"location":"courses/scripting/introduction-to-scripting/output/#what-we-learned","title":"What we Learned","text":"<p>What we Learned</p> <ul> <li>Basic understanding of what the Output window is</li> <li>How to view the Output window</li> <li>What the Command Bar is</li> <li>How to view the Command Bar</li> <li>How information can be displayed in the Output window</li> <li>Basic understanding of the format of an Output message</li> </ul>"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/","title":"Running our First Script","text":""},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#hello-world","title":"Hello World!","text":"<p>Upon opening the Script we created in the previous chapter, you should see the following line of code: Script<pre><code>print(\"Hello world!\")\n</code></pre></p> <p>If you remember back to our Output chapter, we used the <code>print()</code> function inside of our Command Bar to print the sentence \"Hey, I did it!\" to the Output window. Instead of using the Command Bar, we'll use a Script to print \"Hello world!\" to the Output window.</p>"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#starting-the-game","title":"Starting the Game","text":"<p>We now want to start our game, which we can do in multiple ways:</p> <ul> <li>Click the Play icon between the <code>FILE</code> and <code>HOME</code> buttons</li> <li>Switch to the <code>HOME</code> tab, then click the <code>Play</code> button</li> <li>Press F5 which is the hotkey for starting the Game</li> </ul> <p></p>"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#viewing-the-output","title":"Viewing the Output","text":"<p>Upon starting the game, you should see the following appear in the Output window: Output<pre><code>  19:44:39.754  Hello world!  -  Server - Script:1\n</code></pre></p> <p>We've learned about the Output message format already, but let's review it with this usage.</p> Component Example Usage <code>Timestamp</code> 19:44:39.755 Indicates the time in the 24-hour format when the message was output <code>Message</code> Hello world! The information to be displayed in the Output <code>Source</code> Server The source of the print() call <code>Script Name</code> Script The name of the Script which tirggered the message to be sent <code>Line #</code> 1 The line within a Script which triggered the message to be sent <p>Additionally, if we click on <code>Hello world!</code> or <code>Script:1</code> within the Output window, it'll open the script and bring us to the line in the script which caused this to be displayed.</p>"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#stopping-the-game","title":"Stopping the Game","text":"<p>We now want to stop our game, which we can do in multiple ways:</p> <ul> <li>Click the Stop icon between the <code>FILE</code> and <code>HOME</code> buttons</li> <li>Switch to the <code>HOME</code> tab, then click the <code>Stop</code> button</li> <li>Press Shift+F5 which is the hotkey for ending the Game</li> </ul> <p></p>"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#creating-a-local-script","title":"Creating a Local Script","text":"<p>Rather than only using a ServerScript, let's create a LocalScript and once again output <code>Hello world!</code>.</p> <ol> <li>Expand the StarterPlayer folder within the Explorer so you can see both StarterCharacterScripts &amp; StarterPlayerScripts</li> <li>Put your Mouse over the StarterPlayerScripts within the StarterPlayer folder</li> <li>Click the  icon to the right of the StarterPlayerScripts name</li> <li>Search for \"LocalScript\" in the popup box</li> <li>Click the <code>LocalScript</code> button</li> </ol> <p></p> <p>Upon opening the new LocalScript you should see the same code which was in our ServerScript earlier: LocalScript<pre><code>print(\"Hello world!\")\n</code></pre></p> <p>If we start our Game, we'll now see two lines in the Output, one from the Server and one from the Client: Output<pre><code>  03:15:31.496  Hello world!  -  Server - Script:1\n  03:15:32.256  Hello world!  -  Client - LocalScript:1\n</code></pre></p>"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#what-we-learned","title":"What we Learned","text":"<p>What we Learned</p> <ul> <li>How to create different types of Scripts</li> <li>How to start &amp; stop our Game</li> <li>Further understanding of the Output message format</li> </ul>"},{"location":"courses/scripting/introduction-to-scripting/setting-up/","title":"Setting Up","text":""},{"location":"courses/scripting/introduction-to-scripting/setting-up/#creating-our-game","title":"Creating our Game","text":"<p>Before we begin scripting, let's create a new project which we'll work on during this course.</p> <ol> <li>Launch Roblox Studio</li> <li>Click the <code>New</code> button on the left side of the screen</li> <li>Select the Baseplate template</li> </ol> <p>We should now save and publish the project to Roblox, so we don't lose it.</p> <ol> <li>Select the <code>HOME</code> tab on the top of the screen (to the left of the <code>MODEL</code> tab)</li> <li>Click the <code>Game settings</code> button (to the left of the <code>Team Test</code> button)</li> <li>Click the <code>Save to Roblox</code> button</li> <li>Change the \"Name\" field to whatever you want, and click the <code>Save</code> button</li> </ol> <p></p> <p>Studio might reload the place, and now our changes will be saved directly to Roblox and we can modify the game from any device!</p>"},{"location":"courses/scripting/introduction-to-scripting/setting-up/#setting-up-studio","title":"Setting up Studio","text":"<p>Let's make sure we have all the tools enabled in Studio that we need for this course!</p> <ol> <li>Click the <code>VIEW</code> tab at the top of the screen</li> <li>Enable all of the following tools: Explorer, Properties, Toolbox, Output, &amp; Command Bar</li> </ol> <p></p> <p>Your Studio should look nearly identical to the image above.</p>"},{"location":"courses/scripting/introduction-to-scripting/setting-up/#what-we-learned","title":"What we Learned","text":"<p>What we Learned</p> <ul> <li>How to create a new Game</li> <li>How to enable the commonly used Tools in the Studio</li> </ul>"},{"location":"courses/scripting/introduction-to-scripting/string-concatenation/","title":"String Concatenation","text":""},{"location":"courses/scripting/introduction-to-scripting/string-concatenation/#string-concatenation","title":"String Concatenation","text":"<p>We've learned what strings are and even made a few, but how can we combine them?</p> <p>Imagine we wanted to print out <code>The answer to 5+5 is 10!</code>. Currently, we know we can print out the following string:</p> ScriptOutput <pre><code>print(\"The answer to 5+5 is 10!\")\n</code></pre> <pre><code>03:49:43.359  The answer to 5+5 is 10!  -  Server - Script:1\n</code></pre> <p>But what if we wanted to do the actual math of <code>5+5</code> because we didn't know that was equal to <code>10</code>? You might think we could type something like the following:</p> ScriptOutput <pre><code>print(\"The answer to 5+5 is\" 5+5 )\n</code></pre> <pre><code>Expected ')' (to close '(' at column 6), got '5'\n</code></pre> <p>That results in an error because we didn't group the string and equation. We can group these together by putting two periods (<code>..</code>) between them.</p> ScriptOutput <pre><code>print(\"The answer to 5+5 is\" .. 5+5 )\n</code></pre> <pre><code>03:49:43.359  The answer to 5+5 is10  -  Server - Script:1\n</code></pre> <p>We have connected the string and equation, but we still need to make two adjustments:</p> <ul> <li>Put a space between the string and equation</li> <li>Add an <code>!</code> to the end of the sentence</li> </ul> <p>Putting a space is easy, we can simply insert a space after the word <code>is</code> and before the string ends. We can add the <code>!</code> to the end by making it a string and combining it with the equation.</p> ScriptOutput <pre><code>print(\"The answer to 5+5 is \" .. 5+5 .. \"!\")\n</code></pre> <pre><code>03:49:43.359  The answer to 5+5 is 10!  -  Server - Script:1\n</code></pre> Malformed Number <p>If you're getting the error <code>Malformed Number</code> it's because your combiners <code>..</code>s are touching the numbers apart of the equation. To avoid this you should always add a space to the right and left of your combiners <code>..</code>s whenever you use them. It also helps with readability!</p>"},{"location":"courses/scripting/introduction-to-scripting/string-concatenation/#what-we-learned","title":"What we Learned","text":"<p>What we Learned</p> <ul> <li>How to combine strings</li> </ul>"},{"location":"courses/scripting/introduction-to-scripting/using-math/","title":"Using Math","text":"<p>Since we just learned about a few Data Types, let's start using the number type by doing some math! You can follow along within the ServerScript or LocalScript we created earlier. It's recommended that you also type out these math problems to help with memorizing the content.</p>"},{"location":"courses/scripting/introduction-to-scripting/using-math/#addition","title":"Addition","text":"<p>Let's say we have 5 coins and we do a task which rewards us with 3 coins, we should have a total of 8 coins.</p> ScriptOutput <pre><code>print(5+3)\n</code></pre> <pre><code>03:49:43.359  8  -  Server - Script:1\n</code></pre>"},{"location":"courses/scripting/introduction-to-scripting/using-math/#subtraction","title":"Subtraction","text":"<p>Lets say we have 10 coins and we purchase something from the shop for 4 coins, we should have a total of 6 coins.</p> ScriptOutput <pre><code>print(10-4)\n</code></pre> <pre><code>03:49:43.359  6  -  Server - Script:1\n</code></pre>"},{"location":"courses/scripting/introduction-to-scripting/using-math/#multiplication","title":"Multiplication","text":"<p>Let's say we have 5 coins and we do a task which rewards us with 3x our current coins, we should have a total of 15 coins.</p> ScriptOutput <pre><code>print(5*3)\n</code></pre> <pre><code>03:49:43.359  15  -  Server - Script:1\n</code></pre>"},{"location":"courses/scripting/introduction-to-scripting/using-math/#division","title":"Division","text":"<p>Let's say we have 14 coins and we purchase something from the shop which costs us half of our current coins, we should have a total of 7 coins.</p> ScriptOutput <pre><code>print(14/2)\n</code></pre> <pre><code>03:49:43.359  7  -  Server - Script:1\n</code></pre>"},{"location":"courses/scripting/introduction-to-scripting/using-math/#remainder","title":"Remainder","text":"<p>This is slightly different from the common arithmetic operations. The remainder is what is left over when one number is divided by another number.</p> <p>Let's say we have 15 coins and we want to know how much would be leftover if we divided our current coins by 4, we should have a total of 3 coins leftover. Considering how many times 4 can go into 15: 4, 8, then 12. We then have a remainder of 3 coins because 12 + 3 = 15. This might be a bit confusing, but don't worry at all. It's very uncommon to have scenarios where you'll want to use the Remainder.</p> ScriptOutput <pre><code>print(15%4)\n</code></pre> <pre><code>03:49:43.359  3  -  Server - Script:1\n</code></pre>"},{"location":"courses/scripting/introduction-to-scripting/using-math/#what-we-learned","title":"What we Learned","text":"<p>What we Learned</p> <ul> <li>How to do calculations in Luau</li> </ul>"},{"location":"courses/scripting/introduction-to-scripting/variables/","title":"Variables","text":"<p>A variable can be thought of as a container for a value.</p>"},{"location":"courses/scripting/introduction-to-scripting/variables/#naming-a-variable","title":"Naming a Variable","text":"<p>We can create a variable by giving it a name. Certain rules must be followed when naming our variables:</p> <ul> <li>Cannot start with a number</li> <li>Cannot contain certain symbols (Example: <code>!</code>, <code>\"</code>, <code>,</code> &amp; many more)</li> <li>Cannot be certain reserved words (Example: <code>false</code> since that's the value of a boolean)</li> </ul> <p>Let's create a few variables inside of our Script.     Script<pre><code>variable1\nImAVariable\ni_Am_A_Variable\n</code></pre></p>"},{"location":"courses/scripting/introduction-to-scripting/variables/#camel-case","title":"Camel Case","text":"<p>Whenever you decide on a name for your variable, you want to follow a strict naming convention throughout your entire project.</p> <p>Camel Case is a naming convention in which a name is formed of multiple words, the first letter in the first word is lowercase, while the first letter in each word after the first is capitalized.     Example<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\n</code></pre></p> <p>Camel Case is the most commonly used naming convention in Roblox projects. There are no required or standard naming conventions, but it's highly recommended you use the most common one.</p>"},{"location":"courses/scripting/introduction-to-scripting/variables/#assigning-a-value-to-a-variable","title":"Assigning a Value to a Variable","text":"<p>Since we have already given our variables names, we can give them some values to store using the equal <code>=</code> symbol. In the Data Types chapter when we talked about multiple types of data that variables can hold. Lets assign a variable to each type of data.     Script<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\n</code></pre></p> <p>Looking at each variable we can see that <code>variable1</code> is of the type <code>number</code> because its value is 10, <code>imAVariable</code> is of the type <code>string</code> because its value is a combination of characters surrounded by <code>\"</code>s, and <code>iAmAVariable</code> is of the type <code>boolean</code> because its value is the word <code>true</code>. We forgot to include the <code>nil</code> type, but we can create another variable for that. When we create a variable with the value of <code>nil</code>, we're saying the variable doesn't have any value.     Script<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\nimNothing = nil\n</code></pre></p> <p>Tip</p> <p>Name = Value</p> <p>The name of the variable is always on the left, while its value is always on the right and they're separated with an equals <code>=</code> sign between them.</p>"},{"location":"courses/scripting/introduction-to-scripting/variables/#printing-variables","title":"Printing Variables","text":"<p>We have now created a few variables which each hold their own value. Lets use these variables to print their values to the Output window! We can do this by putting each variable name into a print function.</p> ScriptOutput Script<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\nimNothing = nil\n\nprint(variable1)\nprint(imAVariable)\nprint(iAmAVariable)\nprint(imNothing)\n</code></pre> <pre><code>03:49:43.359  10  -  Server - Script:6\n03:49:43.359  Hi!  -  Server - Script:7\n03:49:43.359  true  -  Server - Script:8\n03:49:43.359  nil  -  Server - Script:9\n</code></pre> <p>We can see the value of each variable displayed in the Output window!</p>"},{"location":"courses/scripting/introduction-to-scripting/variables/#reassigning-variables","title":"Reassigning Variables","text":"<p>Rather than a variable only ever having one specific value, you can change the value to anything you want. Let's use our variable named <code>imNothing</code> and reassign its value to <code>10</code> after the <code>print</code> function call on line 9. We'll reassign its value and print it again.</p> ScriptOutput Script<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\nimNothing = nil\n\nprint(variable1)\nprint(imAVariable)\nprint(iAmAVariable)\nprint(imNothing)\n\nimNothing = 10\n\nprint(imNothing)\n</code></pre> <pre><code>03:49:43.359  10  -  Server - Script:6\n03:49:43.359  Hi!  -  Server - Script:7\n03:49:43.359  true  -  Server - Script:8\n03:49:43.359  nil  -  Server - Script:9\n03:49:43.359  10  -  Server - Script:13\n</code></pre> <p>We can see that the first time we print the <code>imNothing</code> variable, <code>nil</code> is output, but once we reassign it to <code>10</code>, and print it again, <code>10</code> is now output.</p>"},{"location":"courses/scripting/introduction-to-scripting/variables/#scope","title":"Scope","text":"<p>There are two types of scopes in Lua, Global and Local. Currently, all the variables we created are of the global scope, which 99.9% of the time is not what you want.</p>"},{"location":"courses/scripting/introduction-to-scripting/variables/#local","title":"Local","text":"<p>Whenever we create a new variable, before typing the name, we should type the keyword <code>local</code>. Here's an example of how it should be written <code>local newVariable = 1</code>. We used the keyword <code>local</code> to specify the variable's scope.</p> <p>There is more to scope than just including a keyword when creating a variable. Although we haven't learned about <code>if-statements</code>, <code>functions</code>, or <code>loops</code> yet, these will be commonly used while you code. When thinking about the scope, think of containers or boxes which can hold things inside of them.</p> <p></p> <p>Let's break apart the image above:</p> <ul> <li>We create <code>variable1</code> in Container 0</li> <li> <p>We use <code>variable1</code> in Container 0 with the <code>print()</code> function</p> </li> <li> <p>We then use an <code>if-statement</code> in Container 0, which now creates Container 1</p> </li> <li>We create <code>variable2</code> in Container 1</li> <li> <p>We use <code>variable1</code> &amp; <code>variable2</code> in Container 1 with the <code>print()</code> function</p> </li> <li> <p>We then use an <code>if-statement</code> in Container 1, which now creates Container 2</p> </li> <li>We create <code>variable3</code> in Container 2</li> <li>We use <code>variable1</code>, <code>variable2</code>, &amp; <code>variable3</code> in Container 2 with the <code>print()</code> function</li> </ul> <p>So remember, everytime we use an <code>if-statement</code>, we basically create a container inside of another container. The important lesson to understand is that each container can access variables that are inside the same container OR in previous containers!</p> <p>That might seem confusing, but let's use the image to better understand:</p> <ul> <li><code>variable1</code> is created in Container 0 and can be used within Container 0, Container 1 &amp; Container 2</li> <li><code>variable2</code> is created in Container 1 and can be used within Container 1 &amp; Container 2, but not Container 0</li> <li><code>variable3</code> is created in Container 2 and can be used within Container 2, but not Container 0 or Container 1</li> </ul> <p>So local variables can be used within the same container they were created in and containers within their container. They cannot be used in containers outside of the one they were created in.</p>"},{"location":"courses/scripting/introduction-to-scripting/variables/#global","title":"Global","text":"<p>As originally stated, you most likely should never create Global scoped variables. With that being said, the reason you should learn about the Global scope is to get a better understanding and easily differentiate between Local &amp; Global.</p> <p>Instead of using the keyword <code>local</code> before the variable's name, you do not include any keywords. Here's an example of how it would be written <code>newVariable = 1</code>. Since we didn't specify the local scope with the <code>local</code> keyword, it's automatically assumed to be global.</p> <p></p> <p>The image above looks similar to the one we saw in the Local lesson, but this time we use Global scoped variables. The containers are the same, but instead of variables being only accessible from their own containers and containers within their container, they can now be accessed from every container!</p> <p>This is why the <code>print()</code> functions no longer have yellow squiggly lines which indicate an error. The <code>print()</code> functions in Container 0 are able to print <code>variable2</code> &amp; <code>variable3</code>, which aren't created within Container 0.</p> <p>You should almost never use Global scope on variables since they can be modified in more locations, it becomes hard to keep track of where changes are made. You might think the Global scope provides benefits over Local, which in some ways it does, but those do not outweigh the negatives.</p>"},{"location":"courses/scripting/introduction-to-scripting/variables/#what-we-learned","title":"What we Learned","text":"<p>What we Learned</p> <ul> <li>What a variable is</li> <li>How to name a variable</li> <li>Which naming convention to use for naming variables</li> <li>How to give a variable a value</li> <li>How to private a variable's value</li> <li>How to reassign a variable to a different value</li> <li>What a scope is</li> <li>The different types of scopes</li> <li>Which scope variables should almost always be</li> </ul>"},{"location":"glossary/studio-layout/","title":"Studio layout","text":""},{"location":"glossary/studio-layout/#menu-bar","title":"Menu Bar","text":"<p>Located towards the top of Studio.</p> <p></p>"},{"location":"glossary/studio-layout/#ribbon-bar","title":"Ribbon Bar","text":"<p>Located below the Menu Bar.</p> <p></p>"},{"location":"glossary/studio-layout/#editor-window","title":"Editor Window","text":"<p>Located below the Ribbon Bar.</p> <p></p>"},{"location":"glossary/studio-layout/#left-panel","title":"Left Panel","text":"<p>Located to the left of the Editor Window.</p> <p></p>"},{"location":"glossary/studio-layout/#right-panel","title":"Right Panel","text":"<p>Located to the right of the Editor Window.</p> <p></p>"},{"location":"glossary/studio-layout/#bottom-panel","title":"Bottom Panel","text":"<p>Located below the Editor Window.</p> <p></p>"},{"location":"glossary/studio-layout/#command-bar","title":"Command Bar","text":"<p>Located below the Bottom Panel.</p> <p></p>"},{"location":"handbook/","title":"The Roblox Scripting (Luau) Handbook","text":"<p>This handbook is meant to swiftly cover different aspects of programming with Luau in the Roblox environment. This is certainly a source you could learn from but is meant to be used more as a reference.</p> <p>If you're looking for a Course to primarily learn from, which will hold you hand and really guide you, explore our Scripting Course!</p> <p>The handbook is slightly inspired by The TypeScript Handbook.</p>"},{"location":"handbook/getting-help/","title":"Getting Help","text":"<p>Finding a place where you can ask questions and receive answers to your problems is one of the best ways to drastically increase your learning process!</p>"},{"location":"handbook/getting-help/#the-problem-solving-process","title":"The Problem Solving Process","text":"<p>Let's go over a simple process to follow each time you run into an issue!</p>"},{"location":"handbook/getting-help/#1-identify-your-issue","title":"1. Identify your Issue","text":"<p>It might sound simple, but you should be able to directly identify and articulate the issue you're having. You'll find this challenging if you're a new Developer, but as you put in more time, you'll eventually be able to easily articulate your exact issue.</p> <p>I'd recommend checking out our Debugging Guide to help with identifying your issue!</p>"},{"location":"handbook/getting-help/#2-google","title":"2. Google","text":"<p>Learning how to properly Google Search a topic is an extremely useful skill, especially when it comes to solving problems!</p> <p>Considering the size of the Roblox Developer community, there's a huge chance that people have already run into the same problem you're currently stuck with, or have even had the same question about how to create a specific system.</p> <p>To improve your searches, I'd recommend adding the word(s) \"Roblox\" or \"Roblox Dev\" at the end of your question. This will usually only bring up results directly related to Roblox Development.</p> <p>Here are a few of my past searches, which might give you an idea of how to improve:</p> <ul> <li>\"spectate camera roblox dev\"</li> <li>\"roblox random decimal\"</li> <li>\"prevent player from moving roblox\"</li> </ul> <p>If you're unable to find answers to your question, you might want to consider another way of asking the question. It sounds odd, but rephrasing the question can have drastically different results!</p>"},{"location":"handbook/getting-help/#3-discord-communities","title":"3. Discord Communities","text":"<p>Once you've put in the work of researching your issue and still haven't found any solutions, it's time to ask the question in one of the community Discords. The best part about the community Discords is you'll usually get a quick response and can ask for an explanation or further questions.</p> <p>Usually, there is a channel called <code>#Scripting-Help</code>, <code>#Coding-Help</code>, or something similar in these Discords meant for asking your questions. Here are a few recommended Discords:</p> <ul> <li>Learn Roblox</li> <li>Hidden Devs</li> <li>Roblox Studio Community</li> <li>Ro Devs</li> </ul>"},{"location":"handbook/getting-help/#4-the-developer-forum","title":"4. The Developer Forum","text":"<p>Posting on the Developer Forum is usually my last resort whenever I'm still unable to solve an issue. My issues usually get solved in the Google stage and if they don't Discord usually takes care of it. Whenever I use the Developer Forum, it's usually for something extremely niche like a question about a specific Library. You can certainly use it for more broad questions though.</p> <p>Depending on the question, the response rate can be slow, compared to Discord, but you're very likely to get a response. With Discord, your questions can get lost if they aren't responded to quickly, but this usually isn't the case on the Developer Forums.</p>"},{"location":"handbook/getting-help/#how-to-ask-for-help","title":"How to Ask For Help","text":"<p>Understanding how to ask for help is a very important lesson that everyone needs to learn when they begin programming. It's common for beginners to ask questions in ways that make it impossible for anyone to help them because of the lack of detail and necessary information.</p> <p>The key to having your questions answered is to make it as easy as possible for others to help you!</p> <p>Let's review a few questions and discuss how we can improve them.</p>"},{"location":"handbook/getting-help/#example-1","title":"Example #1","text":"<p>Bad</p> <p>guys pls help, so i did a script and animation for my sword but for some reason it wont let me attack, the script is right, can you guys try to help and find a solution, thanks!</p> <ul> <li>Didn't include any Scripts or code for other people to review</li> <li>Wasn't specific enough about what \"attack\" means</li> </ul> <p>The user should've provided their Script or at least lines of code which handle the attack. They should've also specified what \"attack\" means, is the animation not playing, or is the enemy not taking damage? You do not want to leave any room for questions or assumptions about your question.</p> <p>Good</p> <p>Hey, I want my Sword to play an Animation each time a Player Right-Clicks while holding it. My issue is that the Animation isn't playing. I can confirm that Right-Clicking is being triggered by calling a print there. <pre><code>Paste lines from the script here, which handle the Right-Click\n</code></pre></p>"},{"location":"handbook/getting-help/#example-2","title":"Example #2","text":"<p>Bad</p> <p>help my leaderstats broke <pre><code>Includes entire long script\n</code></pre></p> <ul> <li>The question appears very low effort</li> <li>Wasn't specific enough about what is \"broke\"</li> <li>Included their entire Script</li> </ul> <p>Although I previously said you should include your Script when asking for help, there can be exceptions. You should prioritize including code relevant to your issue. This is very common among new Developers who might not know where their issue stems from. Either way including too much information is better than not including enough!</p> <p>Good</p> <p>Hey, I'm having an issue with my leaderstats. Whenever I start my Game, I'm unable to see the leaderboard popup at the top-right of the screen. <pre><code>Paste lines from the script here, which handle creating the Leaderstats\n</code></pre></p>"},{"location":"handbook/getting-help/#discord","title":"Discord","text":"<p>Here are a few tips to improve your communication skills and increase response rates in Discord:</p>"},{"location":"handbook/getting-help/#use-code-blocks","title":"Use Code Blocks","text":"<p>You should always paste your code into a Code Block when using Discord. You can see an example of how to do this below:</p> ExampleOutput <pre><code>```lua\n    print(\"This is an example\")\n    if true then\n        print(\"Nicely formatted!\")\n    end\u200e```\n</code></pre> <pre><code>print(\"This is an example\")\nif true then\n    print(\"Nicely formatted!\")\nend\n</code></pre> <p>If you're still unsure of how this is done, while writing a Discord message do the following:</p> <ol> <li>Use Shift+Enter to create a new line</li> <li>Type three backticks (```)</li> <li>On the same line as the three backticks type <code>lua</code> (Make sure there is no space between the backticks and the word)</li> <li>Use Shift+Enter to create a new line</li> <li>Paste the code</li> <li>At the end of the last line of your code type three backticks (```)</li> </ol> <p>You can learn more about Markdown on Discord here!</p>"},{"location":"handbook/getting-help/#use-multiple-discords","title":"Use Multiple Discords","text":"<p>If you're experiencing difficulties getting a response to your question in one Discord, try proposing your question in multiple!</p> <p>Whenever I ask a question in a Discord, I usually copy/paste it to multiple servers. One of the main reasons I do this is because it increases the amount of people seeing your question, directly increasing your chances of getting an answer, and if you only ask in one Server, there might not be anybody there who has an answer or is willing to help you.</p> <p>Once you get an answer to your question, it's important to go back to the other Discords where you posted that question and delete it, so others don't waste time on your already answered question.</p> <p>If you missed it earlier, you can view our recommended Discord Servers!</p>"},{"location":"handbook/lua-to-ts/","title":"Lua to TypeScript","text":"<p>We'll cover the TypeScript version of common Lua components!</p> <p>Checkout Roblox TypeScript to utilize TypeScript in your games!</p>"},{"location":"handbook/lua-to-ts/#variables","title":"Variables","text":"<p>Instead of <code>local</code> you would use either <code>const</code> (short for constant) for variables which do not change or <code>let</code> for variables that do change.</p> <p>You can use <code>let</code> for all variables, but it's best practice to use <code>const</code> when a variable does not change.</p> LuaTypeScript <pre><code>local name = \"MyName\"\n</code></pre> <pre><code>const name = \"MyName\"\nlet secondName = \"MySecondName\"\n\nsecondName = \"NewName\" // This does work\nname = \"NewName\" // This does not work because it's a const\n</code></pre>"},{"location":"handbook/lua-to-ts/#functions","title":"Functions","text":"<ul> <li>Rather than using the <code>local</code> keyword when creating a Function, you don't need to define any scope.</li> <li>Upon creating the Function, use curly braces <code>{}</code> to surround your code block.</li> </ul> LuaTypeScript <pre><code>local function TestFunction(name: string)\n    print(true)\nend\n</code></pre> <pre><code>function TestFunction(name: string) {\nprint(true)\n}\n</code></pre>"},{"location":"handbook/lua-to-ts/#arrow-functions","title":"Arrow Functions","text":"<p>Basically a shorter way of writing out a function.</p> LuaTypeScript <pre><code>local function TestFunction(name: string)\n    print(true)\nend\n</code></pre> <pre><code>const TestFunction = (name: string) =&gt; {\nprint(true)\n}\n\nTestFunction(\"Test\") // Calls the function\n</code></pre>"},{"location":"handbook/lua-to-ts/#conditions","title":"Conditions","text":"LuaTypeScript <pre><code>local name = \"MyName\"\nif name == \"MyName\" then\n    print(true)\nelseif name ~= \"MyName\" then\n    print(false)\nelse\n    print(name)\nend\n</code></pre> <pre><code>const name = \"MyName\"\nif (name === \"MyName\") {\nprint(true);\n} else if (name !== \"MyName\") {\nprint(false);\n} else {\nprint(name);\n}\n</code></pre>"},{"location":"handbook/lua-to-ts/#operators","title":"Operators","text":"Symbol Name Example Result <code>===</code> Equal to if (1 === 2) {} False <code>!==</code> Not Equal to if (1 !== 2) {} True <code>&lt;</code> Less than if (1 &lt; 2) {} True <code>&lt;=</code> Less than or Equal to if (1 &lt;= 2) {} True <code>&gt;</code> Greater than if (1 &gt; 2) {} False <code>&gt;=</code> Greater than than or Equal to if (1 &gt;= 2) {} False"},{"location":"handbook/lua-to-ts/#creating-instances","title":"Creating Instances","text":"LuaTypeScript <pre><code>local folder = Instance.new(\"Folder\")\nfolder.Name = \"Test\"\n</code></pre> <pre><code>const folder = new Instance(\"Folder\")\nfolder.Name = \"Test\"\n</code></pre>"},{"location":"handbook/lua-to-ts/#method-calls","title":"Method Calls","text":"<p>Use a <code>.</code> to call methods rather than <code>:</code>s.</p> LuaTypeScript <pre><code>local folder = Instance.new(\"Folder\")\nfolder:Clone()\n</code></pre> <pre><code>const folder = new Instance(\"Folder\")\nfolder.Clone()\n</code></pre>"},{"location":"handbook/lua-to-ts/#loops","title":"Loops","text":""},{"location":"handbook/lua-to-ts/#for","title":"For","text":""},{"location":"handbook/lua-to-ts/#simple","title":"Simple","text":"LuaTypeScript <pre><code>for count = 1, 5 do\n    print(count)\nend\n</code></pre> <pre><code>for (let count = 1; count &lt;= 5; count++) {\nprint(count)\n}\n</code></pre>"},{"location":"handbook/lua-to-ts/#advanced","title":"Advanced","text":"LuaTypeScript <pre><code>for _, player in ipairs(Players:GetPlayers()) do\n    print(player.Name)\nend\n</code></pre> <pre><code>for (const player of Players.GetPlayers()) {\nprint(player.Name);\n}\n</code></pre>"},{"location":"handbook/lua-to-ts/#while","title":"While","text":"LuaTypeScript <pre><code>while true do\n    print(true)\nend\n</code></pre> <pre><code>while (true) {\nprint(true)\n}\n</code></pre>"},{"location":"handbook/lua-to-ts/#iterables","title":"Iterables","text":"<p>Iterables are iterable objects like Tables or more specifically Arrays &amp; Dictionaries.</p> <p>It's important to know that a Map in TS is the equivalent to a Lua Dictionary!</p> LuaTypeScript <pre><code>for _, player in ipairs(Players:GetPlayers()) do\n    print(player.Name)\nend\n</code></pre> <pre><code>// Arrow Function\nPlayers.GetPlayers().forEach((player: Player) =&gt; {\nprint(player.Name);\n});\n\n// Normal function\nPlayers.GetPlayers().forEach(function (player: Player) {\nprint(player.Name);\n});\n</code></pre>"},{"location":"handbook/lua-to-ts/#tables-arrays-dictionaries","title":"Tables, Arrays, &amp; Dictionaries","text":""},{"location":"handbook/lua-to-ts/#array","title":"Array","text":""},{"location":"handbook/lua-to-ts/#creating","title":"Creating","text":"LuaTypeScript <pre><code>local example = {\"test\", 524, true}\n</code></pre> <pre><code>const example = [\"test\", 524, true]\n</code></pre>"},{"location":"handbook/lua-to-ts/#writing-into","title":"Writing Into","text":"LuaTypeScript <pre><code>local example = {\"test\", 524, true}\n\ntable.insert(example, \"added!\")\n</code></pre> <pre><code>const example = [\"test\", 524, true]\n\nexample.push(\"added!\")\n</code></pre>"},{"location":"handbook/lua-to-ts/#reading-from","title":"Reading From","text":"LuaTypeScript <pre><code>local example = {\"test\", 524, true}\n\nprint(example[1]) -- test\n</code></pre> <pre><code>const example = [\"test\", 524, true]\n\nprint(example[0]) // test\n</code></pre>"},{"location":"handbook/lua-to-ts/#removing-pair","title":"Removing Pair","text":"LuaTypeScript <pre><code>local example = {\"test\", 524, true}\n\ntable.remove(example, 1)\n\nprint(example[1]) -- 524\n</code></pre> <pre><code>const example = [\"test\", 524, true]\n\nexample.remove(0)\n\nprint(example[0]) // 524\n</code></pre>"},{"location":"handbook/lua-to-ts/#iterating","title":"Iterating","text":"<p>Unlike Maps and Dictionaries, arrays are iterated through in order.</p> LuaTypeScript <pre><code>local example = {\"test\", 524, true}\n\nfor index, value in ipairs(example) do\n    print(index, value) -- 1 test    2 524    3 true\nend\n</code></pre> <pre><code>const example = [\"test\", 524, true]\n\n// Same as Lua example\nexample.forEach((value, index) =&gt; {\nprint(index, value) // 1 test    2 524    3 true\n});\n\n// Doesn't include the index\nfor (const value of example) {\nprint(value) // 1 test    2 524    3 true\n}\n</code></pre>"},{"location":"handbook/lua-to-ts/#dictionaries","title":"Dictionaries","text":"<p>The closest thing to a dictionary in TS is a Map. These allow for storing key-value pairs, similar to Lua dictionaries.</p>"},{"location":"handbook/lua-to-ts/#creating_1","title":"Creating","text":"<p>When creating a Map, we must assert what the type of our keys and value will be.</p> <p>Example: <code>new Map&lt;string, any&gt;()</code> | <code>new Map&lt;number, string&gt;()</code></p> LuaTypeScript <pre><code>local example = {\n    Key = 3,\n    key2 = {},\n    key3 = \"NewKey\"\n}\n</code></pre> <pre><code>const example = new Map&lt;string, any&gt;([\n[\"Key\", 3],\n[\"key2\", {}],\n[\"key3\", \"NewKey\"],\n])\n</code></pre>"},{"location":"handbook/lua-to-ts/#writing-into_1","title":"Writing Into","text":"LuaTypeScript <pre><code>local example = {\n    Key = 3,\n    key2 = {},\n    key3 = \"NewKey\"\n}\n\nexample[\"aNewKey\"] = 100\n</code></pre> <pre><code>const example = new Map&lt;string, any&gt;([\n[\"Key\", 3],\n[\"key2\", {}],\n[\"key3\", \"NewKey\"],\n])\n\nexample.set(\"aNewKey\", 100);\n</code></pre>"},{"location":"handbook/lua-to-ts/#reading-from_1","title":"Reading From","text":"LuaTypeScript <pre><code>local example = {\n    Key = 3,\n    key2 = {},\n    key3 = \"NewKey\"\n}\n\nprint(example[\"Key\"]) -- 3\n</code></pre> <pre><code>const example = new Map&lt;string, any&gt;([\n[\"Key\", 3],\n[\"key2\", {}],\n[\"key3\", \"NewKey\"],\n])\n\nprint(example.get(\"Key\")) // 3\n</code></pre>"},{"location":"handbook/lua-to-ts/#removing-pair_1","title":"Removing Pair","text":"LuaTypeScript <pre><code>local example = {\n    Key = 3,\n    key2 = {},\n    key3 = \"NewKey\"\n}\n\nexample[\"Key\"] = nil\n\nprint(example[\"Key\"]) -- nil\n</code></pre> <pre><code>const example = new Map&lt;string, any&gt;([\n[\"Key\", 3],\n[\"key2\", {}],\n[\"key3\", \"NewKey\"],\n])\n\nexampleMap.delete(\"Key\")\n\nprint(example.get(\"Key\")) // nil\n</code></pre>"},{"location":"handbook/lua-to-ts/#iterating_1","title":"Iterating","text":"<p>Reminder: Dictionaries &amp; Maps are unordered, meaning when iterating through them, it will not start from the first entry.</p> LuaTypeScript <pre><code>local example = {\n    Key = 3,\n    key2 = {},\n    key3 = \"NewKey\"\n}\n\nfor key, value in pairs(example) do\n    print(key, value) -- \"Key\" 3   \"key2\" {}   \"key3\" \"NewKey\"\nend\n</code></pre> <pre><code>const example = new Map&lt;string, unknown&gt;([\n[\"Key\", 3],\n[\"key2\", {}],\n[\"key3\", \"NewKey\"],\n])\n\n// Same as Lua example\nfor (const [key, value] of example) {\nprint(key, value) // \"Key\" 3   \"key2\" {}   \"key3\" \"NewKey\"\n}\n\n// Using forEach instead of a For Of Loop\nexample.forEach((value, key) =&gt; {\nprint(key, value); // \"Key\" 3   \"key2\" {}   \"key3\" \"NewKey\"\n});\n\n// Another way of doing it\nfor (const entry of example) {\nprint(entry[0], entry[1]) // \"Key\" 3   \"key2\" {}   \"key3\" \"NewKey\"\n}\n</code></pre>"},{"location":"handbook/lua-to-ts/#classes","title":"Classes","text":""},{"location":"handbook/lua-to-ts/#creating_2","title":"Creating","text":"LuaTypeScript <pre><code>Example = {}\nExample.__index = Example\n\nfunction Example.new(player: Player)\n    local self = setmetatable({}, Inventory)\n\n    self.Player = player\n    self.UserId = player.UserId\n    return self\nend\n\n-- Create object\nlocal object = Example.new(player)\n</code></pre> <pre><code>class Exmaple {\nplayer;\nuserId;\n\nconstructor(player: Player) {\nthis.player = player\nthis.userId = player.UserId\nreturn this\n}\n}\n\n// Create object\nconst object = new Example(player)\n</code></pre>"},{"location":"handbook/lua-to-ts/#methods","title":"Methods","text":"LuaTypeScript <pre><code>Example = {}\nExample.__index = Example\n\nfunction Example.new(player: Player)\n    local self = setmetatable({}, Inventory)\n\n    self.Player = player\n    self.UserId = player.UserId\n    return self\nend\n\nfunction Example:GetPlayerName()\n    return self.Player.Name\nend\n\n-- Create object\nlocal object = Example.new(player)\n\nobject:GetPlayerName()\n</code></pre> <pre><code>class Exmaple {\nplayer;\nuserId;\n\nconstructor(player: Player) {\nthis.player = player\nthis.userId = player.UserId\nreturn this\n}\n\nGetPlayerName() {\nreturn this.player.Name\n}\n}\n\n// Create object\nconst object = new Example(player)\n\nobject.GetPlayerName()\n</code></pre>"},{"location":"handbook/lua-to-ts/#services","title":"Services","text":"<p>You can get a Service similarly to the Lua method, by using the <code>.</code> operator on the <code>game</code> data model.</p> <p>Alternatively you can use the services package.</p> LuaTypeScriptTypeScript (Alternative) <pre><code>local ReplicatedStorage = game:GetService('ReplicatedStorage')\n</code></pre> <pre><code>const ReplicatedStorage = game.GetService('ReplicatedStorage')\n</code></pre> <pre><code>import { ReplicatedStorage } from \"@rbxts/services\";\n</code></pre>"},{"location":"handbook/lua-to-ts/#modules","title":"Modules","text":"<p>Rather than creating a Table and attaching Variables and Functions to it, you create Functions and Variables like normal, then prefix them with the keyword <code>export</code>.</p> <p>To use the Module in another Script, you import the Functions and Variables you want to use from the directory of the Module.</p> LuaTypeScript <pre><code>-- Module Script named Config within ReplicatedStorage\nlocal Config = {}\n\nConfig.List = {\"Example\"}\n\nfunction Config.Print()\n    print(\"Hey!\")\nend\n\nreturn Config\n\n-- Requiring the Module Script in another Script\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\nlocal Config = require(ReplicatedStorage.Config)\n\nprint(Config.List)\nConfig.Print()\n</code></pre> <pre><code>// Module Script named Config within my Rojo Project folder called \"Shared\"\n// which is is synced to the ReplicatedStorage\nexport const List = [\"Example\"];\n\nexport function Print() {\nprint(\"Hey!\")\n}\n\n// Requiring the Module Script in another Script\nimport { List, Print } from \"shared/Config\"\n\nprint(List)\nPrint()\n</code></pre>"},{"location":"handbook/the-basics/","title":"The Basics","text":"<p>We'll cover most of the core concepts of Luau and Roblox Development.</p>"},{"location":"handbook/the-basics/#variables","title":"Variables","text":"<p>Variables are written in the following format: <code>local nameOfVariable = \"valueOfVariable\"</code>.</p> <ul> <li>local is the scope of the variable.</li> <li>nameofVariable is the name of the variable.</li> <li>\"valueOfVariable\" is the value of the variable.</li> </ul>"},{"location":"handbook/the-basics/#types","title":"Types","text":"<p>A variable's type is based off its value. The type of a variable is important as it enables you to know how you can use that variable. For instance, you can only perform math operations on two number variables.</p>"},{"location":"handbook/the-basics/#primitive-types","title":"Primitive Types","text":"<p>These types are standard Luau types, which are also commonly shared with other programming languages.</p> Type Example Info <code>string</code> \"StringType\" Characters surrounded by <code>\"</code>, <code>'</code>, or <code>`</code>s <code>number</code> 10.5 Any number including whole numbers &amp; decimals <code>boolean</code> true <code>true</code> or <code>false</code>, Similar to yes or no <code>table</code> { } Array or Dictionary <code>function</code> function() A function <code>nil</code> <code></code> It means \"nothing\" or \"does not exist\" <p>There is also userdata &amp; thread, but you'll likely never use these types.</p>"},{"location":"handbook/the-basics/#string","title":"String","text":"<p>You can combine two strings using two <code>.</code>s between the strings.</p> ExampleOutput <pre><code>local newString = \"Hey I'm\"..\" pretty cool!\"\nprint(newString)\n</code></pre> <p>Hey I'm pretty cool!</p> <p>Using backticks is another easy way of combining strings.</p> ExampleOutput <pre><code>local firstString = \"Hey I'm\"\nlocal newString = `{firstString} pretty cool!`\nprint(newString)\n</code></pre> <p>Hey I'm pretty cool!</p>"},{"location":"handbook/the-basics/#number","title":"Number","text":"<p>You can do math with two numbers by using any arithmetic symbols between the numbers.</p> ExampleOutput <pre><code>local newMath = 5 + 10\nprint(newMath)\n</code></pre> <p>15</p>"},{"location":"handbook/the-basics/#boolean","title":"Boolean","text":"<p>You can use a conditional statement to create a boolean.</p> ExampleOutput <pre><code>local newBool = 5 + 10 == 15\nprint(newBool)\n</code></pre> <p>true</p>"},{"location":"handbook/the-basics/#roblox-types","title":"Roblox Types","text":"<p>Roblox adjusts their plethora of custom types often, but you always view the most up to date list here!</p>"},{"location":"handbook/the-basics/#examples","title":"Examples","text":""},{"location":"handbook/the-basics/#simple","title":"Simple","text":"<pre><code>local numberVariable = 10\nlocal stringVariable = \"100\"\nlocal booleanVariable = true\nlocal nilVariable = nil\nlocal nilVariable2\nlocal tableArrayVariable = {\"2\", 3, true}\nlocal tableDictionaryVariable = {first = \"2\", 2 = \"3rd\", third = \"two\"}\n</code></pre>"},{"location":"handbook/the-basics/#advanced","title":"Advanced","text":"<pre><code>local numberVariable = 1_000\nlocal stringVariable = \"100\"..\" and two\"\nlocal booleanVariable = numberVariable == 1_000\nlocal nilVariable = nil\nlocal nilVariable2 = nilVariable or nil\n</code></pre>"},{"location":"handbook/the-basics/#conditional-statements","title":"Conditional Statements","text":"<p>We can use conditionals to perform an action based on a specified scenario.</p> <p>Conditionals are written in the following format:</p> <pre><code>local number = 10\nif number == 10 then -- Can be thought of as 10 = 10\n    print(true)\nelseif number &lt; 15 then -- Can be thought of as 10 is less than 15\n    print(true)\nelse -- Can be thought of as any other 'condition' besides the previous two\n    print(false)\nend\n</code></pre> <p>Conditionals are read from top to bottom. For example, first <code>number == 10</code> is read, since this is true <code>print(true)</code> will run, and nothing more will happen. If we want <code>number &lt; 15</code> to be checked, we must use a number between <code>11</code> and <code>14</code> so that <code>number == 10</code> will NOT be true.</p>"},{"location":"handbook/the-basics/#rational-operators","title":"Rational Operators","text":"<p>We commonly use rational operators to create conditionals.</p> <pre><code>if 10 == 10 then -- Can be thought of as 10 = 10 (True)\n    print(true)\nend\n</code></pre> Symbol Name Example Result <code>==</code> Equal to if 1 == 2 False <code>~=</code> Not Equal to if 1 ~= 2 True <code>&lt;</code> Less than if 1 &lt; 2 True <code>&lt;=</code> Less than or Equal to if 1 &lt;= 2 True <code>&gt;</code> Greater than if 1 &gt; 2 False <code>&gt;=</code> Greater than than or Equal to if 1 &gt;= 2 False"},{"location":"handbook/the-basics/#logical-operators","title":"Logical Operators","text":"<p>We can also use logical operators to create slightly more complex conditionals.</p> <pre><code>if not 10 == 10 or not 1 == 1 then -- Can be thought of as 10 ~= 10 or 1 ~= 1 (False)\n    print(true)\nend\n</code></pre> Symbol Name Example Result <code>not</code> Opposite if not 1 == 2 True <code>or</code> Either if 1 == 2 or 1 == 1 True <code>and</code> And if 1 == 1 and 1 == 2 False"},{"location":"handbook/the-basics/#iteration","title":"Iteration","text":"<p>For loops!</p> <p>Show For of iPairs &amp; Pairs</p>"},{"location":"lessons/commissions/","title":"Commissions","text":"<p>If you're looking to make quick Robux or hire someone to create assets for your game, this guide will help streamline your commission journey.</p>"},{"location":"lessons/commissions/#portfolio","title":"Portfolio","text":"<p>To showcase your capabilities and previous work, it's important to have a portfolio. Think of it as a resume, highlighting your strengths with images and videos. You can use popular sites like Cardd to create and share your portfolio easily.</p>"},{"location":"lessons/commissions/#initiating-contact","title":"Initiating Contact","text":"<p>When contacting a potential commissioner, be sure to provide as much detail and context as possible. Your message should include:</p> <ul> <li>What you're specifically wanting</li> <li>The style, quantity, and any extra details</li> <li>The timeframe you need the job finished by</li> <li>The budget you're willing to spend</li> </ul> <p>Here's an example of how you can initiate contact with possible commissioners:</p> <p></p>"},{"location":"lessons/commissions/#terms-conditions","title":"Terms &amp; Conditions","text":"<p>Establishing terms &amp; conditions upfront and before any work begins or payment is made is crucial for a successful commission. Some common terms &amp; conditions that should be established are:</p> <ul> <li>Can either party resell or redistribute the work?</li> <li>Can the commissioner share media of the work?</li> <li>Refund policy</li> </ul>"},{"location":"lessons/commissions/#timeline","title":"Timeline","text":"<p>Creating a timeline helps both parties stay on track towards reaching their goals. First, figure out when you want the task finished by, then choose a few dates between now and then. For example:</p> <p></p> <p>In this example, the project was to be finished by May 2nd. Two milestones were set on April 19th and 25th. Additionally, a condition was posed to the commissioner that if they didn't reach the milestone on the 25th, a refund would be given.</p>"},{"location":"lessons/commissions/#payment-methods","title":"Payment Methods","text":""},{"location":"lessons/commissions/#paypal","title":"PayPal","text":"<p>PayPal is the most commonly used payment method besides Robux. When using PayPal, consider the following:</p>"},{"location":"lessons/commissions/#friends-family","title":"Friends &amp; Family","text":"<p>People often request that payments through PayPal be sent as \"Friends &amp; Family\" rather than \"Goods &amp; Services.\" The reason behind this, is that PayPal will not refund any transaction which has been sent as \"Friends &amp; Family.\" So the person requesting the payment this way thinks they are safe from chargebacks.</p> <p>The truth though, is that \"Friends &amp; Family\" payments are not immune to chargebacks and they can even get your PayPal account suspended. As it turns out, \"Friends &amp; Family\" payments are only immune to chargeback if the payment was directly from PayPal and not a credit card company or bank. Additionally, PayPal has been known to suspend accounts who misuse \"Friends &amp; Family\" transactions, which is extremely easy to track.</p>"},{"location":"lessons/commissions/#refunds","title":"Refunds","text":"<p>It's important to know that when you refund a payment, you actually lose a small amount of money. According to PayPal: \"If you refund a payment for goods or services, there are no fees to process the refund, but the fees you originally paid as the seller are not returned to you\"</p>"},{"location":"lessons/commissions/#chargebacks","title":"Chargebacks","text":"<p>A chargeback occurs when someone disputes a transaction with their bank or credit card company, claiming that the transaction was \"unauthorized\" or that the \"product was never delivered.\" Losing against a chargeback is unfortunately common, and banks and credit card companies tend to take their money back quickly. When responding to a chargeback request, provide as much detail, screenshots, and evidence as possible.</p> <p>If you lose your battle against a chargeback, the next step is usually filing a lawsuit, if the amount of money lost is worth it.</p>"},{"location":"lessons/commissions/#fees","title":"Fees","text":"<p>When you receive a chargeback, you may lose all of the money and incur fees on PayPal. PayPal's fee is $20, while Stripe's fee is $15.</p> <p>Remember to establish terms &amp; conditions upfront, provide detailed information when initiating contact, and carefully consider payment methods to ensure a successful commission experience.</p>"},{"location":"lessons/commissions/#tips","title":"Tips","text":"<ul> <li>When sending a payment, you have an option to describe what the payment is for. You should be very careful with your wording here because it could easily get your or both parties involved's accounts shut down. I've witnessed someone receiving payments for \"Gun Models\" and then having their PayPal account be locked.</li> </ul>"},{"location":"lessons/commissions/#stripe","title":"Stripe","text":"<p>Stripe is less commonly used than PayPal, but they're quite similar.</p>"},{"location":"lessons/commissions/#cashapp-venmo","title":"CashApp &amp; Venmo","text":"<p>These services are more easily accessible than PayPal and seem to be more commonly used by younger audiences.</p> <p>I've briefly used both of these services and they're acceptable, but I would prefer using PayPal as it feels much more professional.</p>"},{"location":"lessons/commissions/#chargebacks_1","title":"Chargebacks","text":"<p>Customers may still chargeback using these services, unless the payment sent was from their CashApp or Venmo balance. If the payment was sent from their Bank Account, then they can still call their bank and file a chargeback.</p>"},{"location":"lessons/commissions/#robux","title":"Robux","text":"<p>This is the only method which is entirely accessible to anyone under the age of 18.</p>"},{"location":"lessons/commissions/#chargebacks_2","title":"Chargebacks","text":"<p>There are no refunds or possibilities of chargebacks.</p>"},{"location":"lessons/commissions/#receiving-payment","title":"Receiving Payment","text":"<p>To receive Robux payments, developers often use Game Passes.</p> <p>Here's how it works:</p> <ul> <li>Create a Game Pass for your game</li> <li>Configure the Game Pass and set the \"Item on Sale\" to true</li> <li>Set the price and share the Game Pass link</li> </ul> <p>It's important to note that when you establish a price for your Game Pass, you need to account for the 30% tax on Game Pass transactions. For example, if you set the price of your Game Pass at 1,000 Robux, you'll only receive 700 Robux. To receive a flat 1,000 Robux, you should add the 30% tax (300 Robux) to the price, resulting in a price of 1,300 Robux.</p> <p>The value of Robux can be a bit tricky to understand. For example, if you were to purchase $10 USD worth of Robux, you'd get 800 Robux. If you were then to use that Robux to pay a commission of 1,000 Robux, it would be the equivalent of paying $2.80 USD! This is due to the Developer Exchange, which allows you to convert your Robux back to USD. When paying with Robux, it's important to realize that 1 Robux is worth $0.0035 USD.</p> <p>For new developers, it may be wise to avoid paying with Robux at first, as they're literally losing money when purchasing Robux. However, once they start making Robux through their projects, it can be a convenient way to pay for services.</p>"},{"location":"lessons/commissions/#guidelines","title":"Guidelines","text":""},{"location":"lessons/commissions/#vetting","title":"Vetting","text":"<p>When you're in the market as a buyer, it's essential to vet the sellers before commissioning any work. One effective method for vetting sellers is to examine their history on various platforms. While I personally use Discord for commissions, this vetting process applies to most social media platforms.</p> <p>To begin, explore the Discord profile of the seller you're interested in commissioning. Additionally, check if they have any other social media accounts linked. It's a good idea to note down these links in case they are removed from the profile later on.</p> <p>Furthermore, take the time to search through the messages the seller has posted in servers that you both share. This can provide valuable insights:</p> <ul> <li>How long ago did the seller start selling their work?</li> <li>Do they exhibit professionalism in their interactions?</li> <li>Have there been any instances of drama or accusations involving the seller?</li> </ul> <p>It's worth noting that if a seller has recently joined the community, it may increase the likelihood of them being a scammer.</p>"},{"location":"lessons/commissions/#downloads","title":"Downloads","text":"<p>Exercise caution when downloading files from individuals online, particularly in the context of Roblox. The most common file formats used in Roblox are <code>.rbxlx</code> and <code>.rbxmx</code>. When receiving files in these formats, be vigilant and verify their authenticity before opening them.</p>"},{"location":"lessons/commissions/#team-create","title":"Team Create","text":"<p>When commissioning someone for a project, it's important to limit their access to only what is necessary. For example, if you're hiring someone to create a map for your game, avoid granting them access to your entire game's place. Instead, copy and paste the relevant elements from your Workspace into a separate place and invite the builder to work on that specific place.</p> <p>By following this practice, you can safeguard your project and ensure that the builder can complete their work without unnecessary access to unrelated components.</p>"},{"location":"lessons/commissions/#going-first","title":"Going First","text":"<p>Determining the order of delivery during a commission can be challenging. In my experience, when commissioning work from someone, it's advisable to adopt a 50/50 approach. This means paying 50% upfront and the remaining 50% once the seller shares media of the finished product or delivers it to you.</p> <p>However, if you find yourself being commissioned by someone else, it is generally not recommended to deliver the entire product until you have received full or majority payment. This approach helps protect your work and ensures that you are fairly compensated.</p> <p>In most cases, if you have commissioned something very specific, the likelihood of the seller scamming you by not delivering the final product is low. It is unlikely that they would invest their time in creating a highly customized commission only to deceive you and risk not receiving full payment. They are unlikely to be able to repurpose those assets elsewhere.</p> <p>Remember to follow these guidelines to mitigate potential risks and establish a mutually beneficial commissioning experience.</p>"},{"location":"lessons/replication/","title":"Replication","text":"<p>Replication is one of the most important systems to understand when Developing on Roblox or any network-based games!</p>"},{"location":"lessons/replication/#what-is-replication","title":"What is Replication","text":"<p>\"The goal of replication is to ensure that all of the players in the game have a consistent model of the game state.\" - 0fps.net</p> <p>The best example of replication is the default Character system in Roblox. Whenever a player moves around, their movements are sent to the game's server and then to all other players. This allows each player to see each other's movements in real-time!</p> <pre><code>graph LR\n  A[Player1] --&gt; B{Server};\n  B --&gt; C[Player2];\n  B --&gt; D[Player3];\n  B --&gt; E[Player4];</code></pre>"},{"location":"lessons/replication/#examples-of-replication","title":"Examples of Replication","text":"<p>Roblox has quite a few systems which automatically replicate for us!</p>"},{"location":"lessons/replication/#leaderstats","title":"Leaderstats","text":"<p>Do you know that little leaderboard you see at the top right corner of many games? That's referred to as the leaderstats.</p> <p>The process of adding a Player to the leaderstats goes as follows:</p> <ol> <li>Create a Folder named \"leaderstats\" and parent it to the Player</li> <li>Create a NumberValue, give it a name, and parent it to the leaderstats Folder</li> </ol> <p>Once you've done this, you can change the value of the NumberValue at any time, and that will be replicated to all players. See, you're not handling the replication, you're just modifying the value of an object and Roblox handles the rest.</p>"},{"location":"lessons/replication/#workspace","title":"Workspace","text":"<p>Whenever a player joins the game, all the contents of the Workspace are replicated to the player. If you make any changes to the Workspace from the server, such as deleting or adding an object, this will automatically be replicated to all current and future players.</p>"},{"location":"lessons/replication/#services","title":"Services","text":"<p>Many Services will instantly replicate their contents to the player upon joining and continue replicating to them as well.</p> <ul> <li>Workspace</li> <li>Players</li> <li>Lighting</li> <li>ReplicatedFirst</li> <li>ReplicatedStorage</li> <li>StarterGui</li> <li>StarterPack</li> <li>StarterPlayer</li> <li>SoundService</li> <li>Chat</li> </ul>"},{"location":"lessons/replication/#how-to-replicate-ourselves","title":"How to Replicate Ourselves","text":"<p>First, let's quickly lay out the basics of networking on Roblox. If you want a more thorough explanation, you can check out our Networking article!</p> <p>Roblox has two Remote objects which enable communication between the Client (Player) &amp; Server:</p> <ul> <li>RemoteEvent: Server -&gt; Client | Client -&gt; Server</li> <li>RemoteFunction: Server -&gt; Client -&gt; Server | Client -&gt; Server -&gt; Client</li> </ul> <p>Now that we understand the basics, let's create a scenario that would require replication.</p>"},{"location":"lessons/replication/#replication-usage-scenario","title":"Replication Usage Scenario","text":"<p>Let's say we have a Wave Defense game and we want to display the current wave to every player. For further clarification, we want to also notify the player of the current wave, each time it increases.</p> <p>Currently, only the Server knows what the current wave is because it's stored and handled within a script there.</p> <p>Let's say the script below is a current example of our script which handles the waves.</p> Waves<pre><code>local wave = 1\n\nwhile true do\n    wave += 1\n    task.wait(5)\nend\n</code></pre> <p>This example shows that every 5 seconds the wave will increase by 1.</p> <p>If we want to replicate the wave to each player, we must use a RemoteEvent. Using the RemoteEvent we can notify all players of the current wave, each time it increases. And upon a player joining, we want to notify them of the current wave as well.</p> Waves<pre><code>local Players = game:GetService(\"Players\")\n\nlocal WaveRemote = ReplicatedStorage.Remotes.WaveRemote\n\nlocal wave = 1\n\nwhile true do\n    wave += 1\n    WaveRemote:FireAllClients(wave)\n    task.wait(5)\nend\n\nPlayers.PlayerAdded:Connect(function(player)\n    WaveRemote:FireClient(player, wave)\nend)\n</code></pre> <p>From the client, we must then listen to the RemoteEvent and we'll be notified each time the wave has been changed.</p>"},{"location":"lessons/replication/#conclusion","title":"Conclusion","text":"<p>Replication is a relatively simple concept to understand once have you a good understanding of networking. You've likely already done some form of replicating but didn't realize it was even called something specific.</p> <p>When I first began fully understanding replication was when I began using ProfileService. This naturally stores each player's data inside a table, rather than the NumberValue or other Value Objects I was using. It opened my eyes to realizing what Roblox automatically does for me.</p>"},{"location":"lessons/rojo/","title":"Rojo","text":""},{"location":"lessons/rojo/#what-is-rojo","title":"What is Rojo","text":"<p>Rojo is a Roblox development tool which enables you to use external Code Editors while developing on Roblox and stay synced with Roblox Studio.</p> <p>Since it enables the use of external Code Editors, you also gain the benefits which come with them such as Version Control &amp; other Extentions.</p> <p>Rojo is used by many reputable Roblox Development teams to create Roblox Games including Adopt Me, Jail Break, Funky Friday, &amp; many others!</p>"},{"location":"lessons/rojo/#why-should-you-use-it","title":"Why Should You Use it","text":"<p>Rojo will make an unbelivably large improvement to your current Roblox Development workflow! The key benefit to Rojo is that it enables you to use the most popular Code Editor, Visual Studio Code. The difference between Roblox Studio's Code Editor and Visual Studio Code is night and day, you can't even imagine.</p>"},{"location":"lessons/rojo/#extensions","title":"Extensions","text":"<p>Visual Studio Code is an amazing tool on its own, but becomes even better with Extensions! Here are just a few of the commonly used ones:</p> <ul> <li>Roblox LSP: Provides massive improvements directly while you code such as: Auto Completion, IntelliSense, &amp; much more!</li> <li>Selene: Helps write correct Lua code. Imagine a Lua master looking over your shoulder and explaining your mistakes in realtime!</li> <li>GitHub Copilot: Suggest code and entire functions in real-time. It's basically an AI which has been trained and continues to train based on similar and your own code!</li> </ul>"},{"location":"lessons/rojo/#version-control","title":"Version Control","text":"<p>There are many Version Control tools out there, but Git is by far the most popular and GitHub is the most popular hosting platform. Git enables you to:</p> <ul> <li>Easily track all changes to your project</li> <li>Collaborate with others on the same project, while keeping the codebase synced</li> <li>Backup your project with each change, which can be easily viewed, tracked, and reverted</li> </ul>"},{"location":"lessons/rojo/#prerequisites","title":"Prerequisites","text":"<p>Before using Rojo, you must install Visual Studio Code which in its simplest form is an extremely useful Code Editor. You can download Visual Studio Code from here.</p> <p>Warning</p> <p>Make sure you install Visual Studio Code, not Visual Studio as these are two different programs!</p>"},{"location":"lessons/rojo/#installation","title":"Installation","text":""},{"location":"lessons/rojo/#visual-studio-code-extension","title":"Visual Studio Code Extension","text":"<p>Once you have Visual Studio Code, you can get the Rojo Extension here. Simply click \"Install\" and this should open the Rojo Extension directly in Visual Studio Code, allowing you to easily install it.</p>"},{"location":"lessons/rojo/#roblox-studio-plugin","title":"Roblox Studio Plugin","text":"<p>There doesn't seem to be an official download link for the latest Rojo Plugin, but you can always find it on the creator's (LPGhatguy) page here!</p> <p>At the time of writing this article, the latest version is Rojo 7, which can be downloaded here.</p>"},{"location":"lessons/rojo/#creating-a-new-rojo-project","title":"Creating a New Rojo Project","text":"<p>There is an easy to follow tutorial on Rojo's official website guiding you through creating a new project, check it out here</p>"},{"location":"lessons/type-checking/","title":"Type Checking","text":""},{"location":"lessons/type-checking/#benefits","title":"Benefits","text":"<ul> <li>Makes your code much easier to understand for yourself and other Developers</li> <li>Provides a much better understanding of what you're doing and realize what you're working with</li> <li>Enables autocompletion in Roblox Studio</li> </ul>"},{"location":"lessons/type-checking/#what-types-are-available","title":"What Types are Available","text":""},{"location":"lessons/type-checking/#primitive","title":"Primitive","text":"<p>There are 8 primitive types, but we\u2019ll only cover the 5 you\u2019ll likely ever use:</p> Type Example Value <code>nil</code> <code>string</code> \"Example\" <code>number</code> 1 <code>boolean</code> true <code>table</code> {}"},{"location":"lessons/type-checking/#roblox","title":"Roblox","text":"<p>Roblox offers many of its own custom types which can all be viewed here. Here are a few commonly used types:</p> <ul> <li>Player</li> <li>Humanoid</li> <li>Workspace</li> <li>Part</li> <li>Model</li> </ul>"},{"location":"lessons/type-checking/#how-to-enable-type-checking","title":"How to Enable Type Checking","text":"<p>While learning, it\u2019s a good idea to use the strict type inferring mode, so we can spot possible issues!</p> <p>You can enable strict mode by putting the following comment at the top of your script: <code>-!strict</code></p> <pre><code>--!strict\nlocal test = 1\n</code></pre>"},{"location":"lessons/type-checking/#type-inferencing","title":"Type Inferencing","text":"<p>Normally when we create a variable and assign a value to it, Studio is able to automatically know what type the variable is.</p> <pre><code>local test = 1\n</code></pre> <p>With the example able, Studio is able to infer that test is a number.</p>"},{"location":"lessons/type-checking/#how-to-specify-the-type-annotation","title":"How to Specify the Type (Annotation)","text":"<p>To specify the type of something like a variable or a function\u2019s argument we\u2019ll use something called a type annotation.</p> <p>Here's an example of using type annotation:</p> <pre><code>local test: number = 10 -- Pointless since it's already inferred\n\nlocal function testing(player: Player, amount: number)\n\nend\n</code></pre> <p>When creating a variable or argument, simply put a semicolon (<code>:</code>) after the name and then put the type.</p>"},{"location":"lessons/type-checking/#optional-parameters","title":"Optional Parameters","text":"<p>What if we create a function and specify the parameter types, but maybe we don\u2019t want to always pass through the second parameter when we call this function? We can use a question mark (<code>?</code>) after specifying the parameter\u2019s type to indicate that parameter isn\u2019t required!</p> <pre><code>local function RenamePlayer(player: Player, name: string?)\n    name = name or \"Default\"\n    player.Name = name\nend\n\nRenamePlayer(player) -- Works\nRenamePlayer(player, \"test\") -- Works\n</code></pre>"},{"location":"lessons/type-checking/#function-return-type","title":"Function Return Type","text":"<p>If we have a function which returns something, we can specify this by annotating it after listing the parameters!</p> <pre><code>local function GetSum(num1: number, num2: number): number\n    return num1 + num2\nend\n</code></pre>"},{"location":"lessons/type-checking/#union-types","title":"Union Types","text":"<p>What if we have a variable, which could be a different type at multiple points? We can use a bar (<code>|</code>) to basically act as the word or when annotating types!</p> <pre><code>local answer: boolean | string | number = \"Yes\"\nanswer = true\nanswer = 5\n</code></pre>"},{"location":"lessons/type-checking/#singleton-types","title":"Singleton Types","text":"<p>You can create types which are very specific!</p> <pre><code>local test: \"Yes\" | \"No\" = \"Yes\"\nlocal test2: 1 | 2 | 3 = 2\n</code></pre>"},{"location":"lessons/type-checking/#creating-custom-types","title":"Creating Custom Types","text":"<p>Creating a type is similar to creating a variable!</p> <pre><code>type test = number\ntype test2 = number | string\n</code></pre>"},{"location":"lessons/type-checking/#getting-types-from-another-script","title":"Getting Types from another Script","text":"<p>Sharing types amongst scripts is a common thing. Personally, I like to make one Module Script in the Replicated Storage where I store all my custom types!</p> <p>You can use the keyword <code>export</code> to allow other scripts requiring the module to use those custom types.</p> ReplicatedStorage/Types.lua<pre><code>local Types = {}\n\nexport type Pet = {\n    Name: string,\n    Rarity: string\n}\n\nexport type PlayerData = {\n    Cash: number,\n    Gems: number,\n    Pets: {\n        [string]: Pet\n    }\n}\n\nreturn Types\n</code></pre> ServerScriptService/PlayerData.server.lua<pre><code>local Types = require(ReplicatedStorage.Types)\n\nlocal Template: Types.PlayerData = {\n    Cash = 0,\n    Gems = 0,\n    Pets = {}\n}\n</code></pre>"},{"location":"lessons/type-checking/#type-refinement","title":"Type Refinement","text":"<p>A common scenario I find myself in, is I\u2019ll loop through some children within either a Gui or even a Folder in my Workspace. The children I\u2019m looking for might be Parts, but within that same Folder could be Models or other objects. When doing this, issues can arise with auto-completion, because Studio doesn\u2019t recognize what we looped through are parts.</p> <pre><code>for _, possiblePart in Workspace.Parts:GetChildren() do\n    if not possiblePart:IsA(\"Part\") then continue end\n\n    local part: Part = possiblePart\n    part.BrickColor = BrickColor.new(1)\nend\n</code></pre>"},{"location":"lessons/type-checking/#assigning-a-type-to-a-module-variable","title":"Assigning a Type to a Module Variable","text":"<p>If you create a variable apart of a Module, you\u2019ll realize that you cannot actually annotate its type. There is a workaround to this, which to be honest, I\u2019m not a huge fan of and usually don\u2019t use, but it is nice to know!</p> <p>What we can do is create a local variable and annotate its type, then assign the Module variable to be the value of that local variable.</p> <pre><code>local module = {}\n\nlocal numbers: number = 0\nmodule.Numbers = numbers\n\nreturn module\n</code></pre>"},{"location":"lessons/type-checking/#other-resources","title":"Other Resources","text":"<p>With this article, we went through most of the common and basic scenarios to help you understand type checking. There are other resources out there, which go into much more details and also touch on the same topics as well!</p> <ul> <li>Luau Type Checking Article</li> <li>Dev Forum Post \"Type checking for beginners!\"</li> </ul>"}]}