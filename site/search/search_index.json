{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"about/","text":"<p>Upon joining the Roblox Development Community, I realized there aren't any extensively insightful resources for Modern-Day Game Development on the Platform.</p> <p>This isn't to discredit any of the Learning Resources which do currently exist such as Roblox's Guides. In a way, this is to expand upon them.</p> <p>Roblox's Guides are useful for brand new Developers, but some of the Guides are also flawed in a few ways:</p> <ul> <li>Not following best practices</li> <li>Outdated</li> <li>Poor demonstrations or examples</li> <li>Not giving enough details on a topic</li> </ul> <p>With those flaws in mind, we strive to help Developers of any age, learn how to develop on the Roblox Platform! We have courses which go through step-by-step, creating the most popular Roblox Gamemodes such as Simulators, Tycoons, FPS, &amp; more!</p>","title":"About Learn Roblox"},{"location":"courses/roblox-studio-basics/","text":"<p>Roblox Studio is the free and official development software created by Roblox, used to create Roblox Games.</p> <p>Studio enables us to do every aspect of Development, including: Scripting, Modeling, Building, and much more!</p>","title":"What is Roblox Studio"},{"location":"courses/roblox-studio-basics/creating-a-new-place/","text":"<p>Upon luanching Studio for the first time, you should be met with a screen similar to the image below.</p> <p></p> <p>On the left side of the screen there are four navigation buttons.</p>    Button Description     <code>\u2795 New</code> Displays templates for fast Game creation   <code>\ud83d\udcbc My Games</code> Displays the Games you or your group own or have permission to access   <code>\ud83d\udd52 Recent</code> Displays the Games you recently opened or worked on   <code>\ud83d\uddc4 Archive</code> Displays Games you previously archived","title":"Learning the Startup Interface"},{"location":"courses/roblox-studio-basics/creating-a-new-place/#creating-a-new-game","text":"<p>To create a new Game, we want to be on the <code>\u2795 New</code> tab, which displays a few template Games we can choose from.</p> <ol> <li>Select the Baseplate template</li> </ol> <p></p> <p>Studio will then open the Baseplate template and your screen should look similar to the image below.</p> <p></p>","title":"Creating a New Game"},{"location":"courses/scripting/introduction-to-scripting/","text":"<p>Luau is the only scripting language used to develop Roblox games. It's maintained solely by Roblox, but is a fork of the popular scripting language Lua.</p> <p>It was created by Roblox due to all the changes they made to fit the platform.</p> <p>From a Developer's perspective, it's written nearly identical to Lua. Roblox also focuses on compatibility with Lua when making changes.</p> <p>If you wish to learn more about Luau or Lua, you can browse their official sites for insightful information and helpful guides!</p> <p>Additionally, this course takes inspiration from and expands upon a few of the following resources:</p> <ul> <li>Roblox Developer Articles</li> <li>Lua Manual</li> </ul>","title":"What is Luau"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/","text":"","title":"Creating a Script"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#what-is-a-script","text":"<p>Similar to the Command Bar we used to run our code in the previous chapter, Scripts are the primary way of running code!</p> <p>There are 3 types of Scripts:</p>    Types Description      <code>Server Script</code> Controlled and ran by the server aka our game    <code>Local Script</code> Controlled and ran by the client aka the player    <code>Module Script</code> Controlled by either the server or client     <p>Note</p> <ul> <li>Server Scripts are also commonly referred to as just Scripts</li> <li>Module Scripts are more complex, so we won't be incorporating or discussing them much until later in the course</li> </ul>","title":"What is a Script"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#where-do-we-put-scripts","text":"<p>Before we create a script we should get a general understanding of where to put our Local &amp; Server scripts.</p>","title":"Where Do We Put Scripts"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#what-are-services","text":"<p>If we look inside of our Explorer we can many Services listed. Each service provides some usage for us, especially when scripting.</p>  <p></p>  <p>Here are a few examples that should make it easier to understand Services:</p> <ul> <li>Workspace: Contains any objects that are to be rendered in the 3D world</li> <li>Players: Contains Player objects for presently connected clients to a Roblox game server</li> <li>Lighting: Controls the environmental lighting in a game</li> </ul> <p>If you look inside the Workspace service within your Explorer you should see a few parts which include the <code>Baseplate</code> &amp; <code>SpawnPoint</code> You can see these parts displayed directly in your Game's world currently.</p> <p>Whenever a player joins our game, the Players service will generate and hold a Player object with that specific player's data. This is extremely useful in scripting.</p> <p>You can also think of Services as a Folder. You expanded the Workspace service and saw a few parts inside of it, you could also do the same with Lighting and see objects inside of it as well.</p>","title":"What are Services"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#which-services-should-contain-scripts","text":"<p>While you could store a Server Script in nearly any service and it would still function, the ServerScriptService is the primary service for this.</p> <p>Local Scripts on the other hand need to be loaded by a client aka player to run. The ServerScriptService cannot be accessed by players, so you wouldn't normally store a Local Script there. The StarterPlayer/StarterPlayerScripts service is the primary service to store Local Scripts as that is its purpose. The Workspace, StarterPack, &amp; StarterGui services are also commonly used to hold Local Scripts.</p> <p>The table reflects what we talked about above.</p>    Services Script Types     <code>Workspace</code>  Local   <code>ServerScriptService</code>  Server   <code>StarterGui</code>  Local   <code>StarterPack</code>  Local   <code>StarterPlayer/StarterPlayerScripts</code>  Local","title":"Which Services Should Contain Scripts"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#creating-a-server-script","text":"<ol> <li>Put your Mouse over the ServerScriptService within the Explorer</li> <li>Click the  icon to the right of the ServerScriptService name</li> <li>Search for \"Script\" in the popup box</li> <li>Click the <code>Script</code> button</li> </ol>  <p></p>  <p>Within ServerScriptService you should see the new Server Script which is named <code>Script</code>.</p>  <p></p>","title":"Creating a Server Script"},{"location":"courses/scripting/introduction-to-scripting/creating-a-script/#what-we-learned","text":"<p>What we Learned</p> <ul> <li>Basic understanding of what a Script is</li> <li>The 3 types of Scripts</li> <li>Where Scripts can be stored</li> <li>Very basic understanding of a Service</li> <li>How to create a Script</li> </ul>","title":"What we Learned"},{"location":"courses/scripting/introduction-to-scripting/data-types/","text":"","title":"Data Types"},{"location":"courses/scripting/introduction-to-scripting/data-types/#what-are-data-types","text":"<p>Data Types are the classifications we use to specify what type of value a piece of data is. Roblox itself contains many data types which you'll learn about throughout this course and on your own, but we'll go over the basic Luau ones in this chapter.</p>","title":"What are Data Types"},{"location":"courses/scripting/introduction-to-scripting/data-types/#basic-luau-data-types","text":"","title":"Basic Luau Data Types"},{"location":"courses/scripting/introduction-to-scripting/data-types/#number","text":"<p>Any number including both whole numbers and decimals. Example<pre><code>print(1)\nprint(1.5)\nprint(.5)\n</code></pre></p>","title":"number"},{"location":"courses/scripting/introduction-to-scripting/data-types/#string","text":"<p>Any combination of characters surrounded by double quotes. Example<pre><code>print(\"Hi\")\nprint(\"I have 1.5 dollars\")\nprint(\"\")\n</code></pre></p>","title":"string"},{"location":"courses/scripting/introduction-to-scripting/data-types/#boolean","text":"<p>There are only two possible values for a boolean, either true or false. You can think of these as the answer \"yes\" or \"no\" to a question. Example<pre><code>print(true)\nprint(false)\n</code></pre></p>","title":"boolean"},{"location":"courses/scripting/introduction-to-scripting/data-types/#nil","text":"<p>nil means doesn't exist. You can also think of the word \"nothing.\" Example<pre><code>print(nil)\n</code></pre></p>","title":"nil"},{"location":"courses/scripting/introduction-to-scripting/data-types/#what-we-learned","text":"<p>What we Learned</p> <ul> <li>What are Data Types</li> <li>The 4 basic Luau Data Types</li> </ul>","title":"What we Learned"},{"location":"courses/scripting/introduction-to-scripting/output/","text":"","title":"Output"},{"location":"courses/scripting/introduction-to-scripting/output/#what-is-the-output","text":"<p>The Output is where the most important information will be displayed from our scripts! We'll constantly be using the output to view errors and debug our code.</p> <p>You should see the Output tab at the bottom of your Studio window.</p> <p></p>  Don't see the Output tab? <p>If you do not see the Output tab, click on the <code>VIEW</code> button at the top of Studio, then click the <code>\ud83d\uddbc Output</code> button to enable it.</p>","title":"What is the Output"},{"location":"courses/scripting/introduction-to-scripting/output/#the-command-bar","text":"<p>The Command Bar can be used as another method of running code similar to scripts! The code written within the command bar is usually a small task or meant for testing.</p> <p>You should see the Command Bar tab at the bottom of your Studio window, directly below the Output tab.</p> <p></p>  Don't see the Command Bar tab? <p>If you do not see the Command Bar tab, click on the <code>VIEW</code> button at the top of Studio, then click the <code>\ud83d\uddbc Command Bar</code> button to enable it.</p>","title":"The Command Bar"},{"location":"courses/scripting/introduction-to-scripting/output/#printing-to-the-output","text":"<p>What you're about to learn will be one of the most commonly used knowledge throughout your entire scripting journey! We can send a message to the Output by using the Command Bar.</p> <p>Type the text below into your Command Bar and hit enter:</p> Command BarOutput   <pre><code>print(\"Hey, I did it!\")\n</code></pre>   <pre><code>19:44:39.754  &gt; print(\"Hey, I did it!\") -  Studio\n19:44:39.755  Hey, I did it!  -  Edit\n</code></pre>    <p>Upon hitting Enter, you should see a similar message appear in your Output as displayed in the Output tab above!</p>","title":"Printing to the Output"},{"location":"courses/scripting/introduction-to-scripting/output/#understanding-the-output","text":"<p>The Output message is made up of a few components:</p>    Component Example Usage     <code>Timestamp</code> 19:44:39.755 Indicates the time in the 24-hour format when the message was output   <code>Message</code> Hey, I did it! The information to be displayed in the Output   <code>Source</code> Studio The source of the print() call. Usually <code>Client</code> or <code>Server</code>   <code>Script Name</code> Not Displayed The name of the Script which triggered the message to be sent   <code>Line #</code> Not Displayed The line within a Script which triggered the message to be sent    <p>The timestamp will be different for you because the timestamp is based on your current time in the 24-hour format. Since I'm in the Eastern Standard Timezone the Output was triggered at <code>7:44:39.754PM</code>, which in the 24-hour format is <code>19:44:39.755</code>.</p> <p>The source was Studio because we used the <code>print()</code> function in our Command Bar. Usually the source would be Client if you're using <code>print()</code> in a LocalScript or Server from a ServerScript.</p> <p>Since we used the Command Bar instead of a Script, no <code>Line #</code> was displayed. Whenever there is output from a Script the last part of the output will be a number that indicates the line that caused the output.</p> <p>Congratulations you can now call yourself a scripter as you just wrote your first line of code and used the <code>print()</code> function!</p>","title":"Understanding the Output"},{"location":"courses/scripting/introduction-to-scripting/output/#what-we-learned","text":"<p>What we Learned</p> <ul> <li>Basic understanding of what the Output window is</li> <li>How to view the Output window</li> <li>What the Command Bar is</li> <li>How to view the Command Bar</li> <li>How information can be displayed in the Output window</li> <li>Basic understanding of the format of an Output message</li> </ul>","title":"What we Learned"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/","text":"","title":"Running our First Script"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#hello-world","text":"<p>Upon opening the Script we created in the previous chapter, you should see the following line of code: Script<pre><code>print(\"Hello world!\")\n</code></pre></p> <p>If you remember back to our Output chapter, we used the <code>print()</code> function inside of our Command Bar to print the sentence \"Hey, I did it!\" to the Output window. Instead of using the Command Bar, we'll use a Script to print \"Hello world!\" to the Output window.</p>","title":"Hello World!"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#starting-the-game","text":"<p>We now want to start our game, which we can do in multiple ways:</p> <ul> <li>Click the Play icon between the <code>FILE</code> and <code>HOME</code> buttons</li> <li>Switch to the <code>HOME</code> tab, then click the <code>Play</code> button</li> <li>Press F5 which is the hotkey for starting the Game</li> </ul>  <p></p>","title":"Starting the Game"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#viewing-the-output","text":"<p>Upon starting the game, you should see the following appear in the Output window: Output<pre><code>  19:44:39.754  Hello world!  -  Server - Script:1\n</code></pre></p> <p>We've learned about the Output message format already, but let's review it with this usage.</p>    Component Example Usage     <code>Timestamp</code> 19:44:39.755 Indicates the time in the 24-hour format when the message was output   <code>Message</code> Hello world! The information to be displayed in the Output   <code>Source</code> Server The source of the print() call   <code>Script Name</code> Script The name of the Script which tirggered the message to be sent   <code>Line #</code> 1 The line within a Script which triggered the message to be sent    <p>Additionally, if we click on <code>Hello world!</code> or <code>Script:1</code> within the Output window, it'll open the script and bring us to the line in the script which caused this to be displayed.</p>","title":"Viewing the Output"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#stopping-the-game","text":"<p>We now want to stop our game, which we can do in multiple ways:</p> <ul> <li>Click the Stop icon between the <code>FILE</code> and <code>HOME</code> buttons</li> <li>Switch to the <code>HOME</code> tab, then click the <code>Stop</code> button</li> <li>Press Shift+F5 which is the hotkey for ending the Game</li> </ul>  <p></p>","title":"Stopping the Game"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#creating-a-local-script","text":"<p>Rather than only using a ServerScript, let's create a LocalScript and once again output <code>Hello world!</code>.</p> <ol> <li>Expand the StarterPlayer folder within the Explorer so you can see both StarterCharacterScripts &amp; StarterPlayerScripts</li> <li>Put your Mouse over the StarterPlayerScripts within the StarterPlayer folder</li> <li>Click the  icon to the right of the StarterPlayerScripts name</li> <li>Search for \"LocalScript\" in the popup box</li> <li>Click the <code>LocalScript</code> button</li> </ol>  <p></p>  <p>Upon opening the new LocalScript you should see the same code which was in our ServerScript earlier: LocalScript<pre><code>print(\"Hello world!\")\n</code></pre></p> <p>If we start our Game, we'll now see two lines in the Output, one from the Server and one from the Client: Output<pre><code>  03:15:31.496  Hello world!  -  Server - Script:1\n  03:15:32.256  Hello world!  -  Client - LocalScript:1\n</code></pre></p>","title":"Creating a Local Script"},{"location":"courses/scripting/introduction-to-scripting/running-our-first-script/#what-we-learned","text":"<p>What we Learned</p> <ul> <li>How to create different types of Scripts</li> <li>How to start &amp; stop our Game</li> <li>Further understanding of the Output message format</li> </ul>","title":"What we Learned"},{"location":"courses/scripting/introduction-to-scripting/setting-up/","text":"","title":"Setting Up"},{"location":"courses/scripting/introduction-to-scripting/setting-up/#creating-our-game","text":"<p>Before we begin scripting, let's create a new project which we'll work on during this course.</p> <ol> <li>Launch Roblox Studio</li> <li>Click the <code>New</code> button on the left side of the screen</li> <li>Select the Baseplate template</li> </ol> <p>We should now save and publish the project to Roblox, so we don't lose it.</p> <ol> <li>Select the <code>HOME</code> tab on the top of the screen (to the left of the <code>MODEL</code> tab)</li> <li>Click the <code>Game settings</code> button (to the left of the <code>Team Test</code> button)</li> <li>Click the <code>Save to Roblox</code> button</li> <li>Change the \"Name\" field to whatever you want, and click the <code>Save</code> button</li> </ol> <p></p> <p>Studio might reload the place, and now our changes will be saved directly to Roblox and we can modify the game from any device!</p>","title":"Creating our Game"},{"location":"courses/scripting/introduction-to-scripting/setting-up/#setting-up-studio","text":"<p>Let's make sure we have all the tools enabled in Studio that we need for this course!</p> <ol> <li>Click the <code>VIEW</code> tab at the top of the screen</li> <li>Enable all of the following tools: Explorer, Properties, Toolbox, Output, &amp; Command Bar</li> </ol> <p></p> <p>Your Studio should look nearly identical to the image above.</p>","title":"Setting up Studio"},{"location":"courses/scripting/introduction-to-scripting/setting-up/#what-we-learned","text":"<p>What we Learned</p> <ul> <li>How to create a new Game</li> <li>How to enable the commonly used Tools in the Studio</li> </ul>","title":"What we Learned"},{"location":"courses/scripting/introduction-to-scripting/string-concatenation/","text":"","title":"String Concatenation"},{"location":"courses/scripting/introduction-to-scripting/string-concatenation/#string-concatenation","text":"<p>We've learned what strings are and even made a few, but how can we combine them?</p> <p>Imagine we wanted to print out <code>The answer to 5+5 is 10!</code>. Currently, we know we can print out the following string:</p> ScriptOutput   <pre><code>print(\"The answer to 5+5 is 10!\")\n</code></pre>   <pre><code>03:49:43.359  The answer to 5+5 is 10!  -  Server - Script:1\n</code></pre>    <p>But what if we wanted to do the actual math of <code>5+5</code> because we didn't know that was equal to <code>10</code>? You might think we could type something like the following:</p> ScriptOutput   <pre><code>print(\"The answer to 5+5 is\" 5+5 )\n</code></pre>   <pre><code>Expected ')' (to close '(' at column 6), got '5'\n</code></pre>    <p>That results in an error because we didn't group the string and equation. We can group these together by putting two periods (<code>..</code>) between them.</p> ScriptOutput   <pre><code>print(\"The answer to 5+5 is\" .. 5+5 )\n</code></pre>   <pre><code>03:49:43.359  The answer to 5+5 is10  -  Server - Script:1\n</code></pre>    <p>We have connected the string and equation, but we still need to make two adjustments:</p> <ul> <li>Put a space between the string and equation</li> <li>Add an <code>!</code> to the end of the sentence</li> </ul> <p>Putting a space is easy, we can simply insert a space after the word <code>is</code> and before the string ends. We can add the <code>!</code> to the end by making it a string and combining it with the equation.</p> ScriptOutput   <pre><code>print(\"The answer to 5+5 is \" .. 5+5 .. \"!\")\n</code></pre>   <pre><code>03:49:43.359  The answer to 5+5 is 10!  -  Server - Script:1\n</code></pre>     Malformed Number <p>If you're getting the error <code>Malformed Number</code> it's because your combiners <code>..</code>s are touching the numbers apart of the equation. To avoid this you should always add a space to the right and left of your combiners <code>..</code>s whenever you use them. It also helps with readability!</p>","title":"String Concatenation"},{"location":"courses/scripting/introduction-to-scripting/string-concatenation/#what-we-learned","text":"<p>What we Learned</p> <ul> <li>How to combine strings</li> </ul>","title":"What we Learned"},{"location":"courses/scripting/introduction-to-scripting/using-math/","text":"<p>Since we just learned about a few Data Types, let's start using the number type by doing some math! You can follow along within the ServerScript or LocalScript we created earlier. It's recommended that you also type out these math problems to help with memorizing the content.</p>","title":"Using Math"},{"location":"courses/scripting/introduction-to-scripting/using-math/#addition","text":"<p>Let's say we have 5 coins and we do a task which rewards us with 3 coins, we should have a total of 8 coins.</p> ScriptOutput   <pre><code>print(5+3)\n</code></pre>   <pre><code>03:49:43.359  8  -  Server - Script:1\n</code></pre>","title":"Addition"},{"location":"courses/scripting/introduction-to-scripting/using-math/#subtraction","text":"<p>Lets say we have 10 coins and we purchase something from the shop for 4 coins, we should have a total of 6 coins.</p> ScriptOutput   <pre><code>print(10-4)\n</code></pre>   <pre><code>03:49:43.359  6  -  Server - Script:1\n</code></pre>","title":"Subtraction"},{"location":"courses/scripting/introduction-to-scripting/using-math/#multiplication","text":"<p>Let's say we have 5 coins and we do a task which rewards us with 3x our current coins, we should have a total of 15 coins.</p> ScriptOutput   <pre><code>print(5*3)\n</code></pre>   <pre><code>03:49:43.359  15  -  Server - Script:1\n</code></pre>","title":"Multiplication"},{"location":"courses/scripting/introduction-to-scripting/using-math/#division","text":"<p>Let's say we have 14 coins and we purchase something from the shop which costs us half of our current coins, we should have a total of 7 coins.</p> ScriptOutput   <pre><code>print(14/2)\n</code></pre>   <pre><code>03:49:43.359  7  -  Server - Script:1\n</code></pre>","title":"Division"},{"location":"courses/scripting/introduction-to-scripting/using-math/#remainder","text":"<p>This is slightly different from the common arithmetic operations. The remainder is what is left over when one number is divided by another number.</p> <p>Let's say we have 15 coins and we want to know how much would be leftover if we divided our current coins by 4, we should have a total of 3 coins leftover. Considering how many times 4 can go into 15: 4, 8, then 12. We then have a remainder of 3 coins because 12 + 3 = 15. This might be a bit confusing, but don't worry at all. It's very uncommon to have scenarios where you'll want to use the Remainder.</p> ScriptOutput   <pre><code>print(15%4)\n</code></pre>   <pre><code>03:49:43.359  3  -  Server - Script:1\n</code></pre>","title":"Remainder"},{"location":"courses/scripting/introduction-to-scripting/using-math/#what-we-learned","text":"<p>What we Learned</p> <ul> <li>How to do calculations in Luau</li> </ul>","title":"What we Learned"},{"location":"courses/scripting/introduction-to-scripting/variables/","text":"<p>A variable can be thought of as a container for a value.</p>","title":"Variables"},{"location":"courses/scripting/introduction-to-scripting/variables/#naming-a-variable","text":"<p>We can create a variable by giving it a name. Certain rules must be followed when naming our variables:</p> <ul> <li>Cannot start with a number</li> <li>Cannot contain certain symbols (Example: <code>!</code>, <code>\"</code>, <code>,</code> &amp; many more)</li> <li>Cannot be certain reserved words (Example: <code>false</code> since that's the value of a boolean)</li> </ul> <p>Let's create a few variables inside of our Script.     Script<pre><code>variable1\nImAVariable\ni_Am_A_Variable\n</code></pre></p>","title":"Naming a Variable"},{"location":"courses/scripting/introduction-to-scripting/variables/#camel-case","text":"<p>Whenever you decide on a name for your variable, you want to follow a strict naming convention throughout your entire project.</p> <p>Camel Case is a naming convention in which a name is formed of multiple words, the first letter in the first word is lowercase, while the first letter in each word after the first is capitalized.     Example<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\n</code></pre></p> <p>Camel Case is the most commonly used naming convention in Roblox projects. There are no required or standard naming conventions, but it's highly recommended you use the most common one.</p>","title":"Camel Case"},{"location":"courses/scripting/introduction-to-scripting/variables/#assigning-a-value-to-a-variable","text":"<p>Since we have already given our variables names, we can give them some values to store using the equal <code>=</code> symbol. In the Data Types chapter when we talked about multiple types of data that variables can hold. Lets assign a variable to each type of data.     Script<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\n</code></pre></p> <p>Looking at each variable we can see that <code>variable1</code> is of the type <code>number</code> because its value is 10, <code>imAVariable</code> is of the type <code>string</code> because its value is a combination of characters surrounded by <code>\"</code>s, and <code>iAmAVariable</code> is of the type <code>boolean</code> because its value is the word <code>true</code>. We forgot to include the <code>nil</code> type, but we can create another variable for that. When we create a variable with the value of <code>nil</code>, we're saying the variable doesn't have any value.     Script<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\nimNothing = nil\n</code></pre></p>  <p>Tip</p> <p>Name = Value</p> <p>The name of the variable is always on the left, while its value is always on the right and they're separated with an equals <code>=</code> sign between them.</p>","title":"Assigning a Value to a Variable"},{"location":"courses/scripting/introduction-to-scripting/variables/#printing-variables","text":"<p>We have now created a few variables which each hold their own value. Lets use these variables to print their values to the Output window! We can do this by putting each variable name into a print function.</p> ScriptOutput   Script<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\nimNothing = nil\n\nprint(variable1)\nprint(imAVariable)\nprint(iAmAVariable)\nprint(imNothing)\n</code></pre>   <pre><code>03:49:43.359  10  -  Server - Script:6\n03:49:43.359  Hi!  -  Server - Script:7\n03:49:43.359  true  -  Server - Script:8\n03:49:43.359  nil  -  Server - Script:9\n</code></pre>    <p>We can see the value of each variable displayed in the Output window!</p>","title":"Printing Variables"},{"location":"courses/scripting/introduction-to-scripting/variables/#reassigning-variables","text":"<p>Rather than a variable only ever having one specific value, you can change the value to anything you want. Let's use our variable named <code>imNothing</code> and reassign its value to <code>10</code> after the <code>print</code> function call on line 9. We'll reassign its value and print it again.</p> ScriptOutput   Script<pre><code>variable1 = 10\nimAVariable = \"Hi!\"\niAmAVariable = true\nimNothing = nil\n\nprint(variable1)\nprint(imAVariable)\nprint(iAmAVariable)\nprint(imNothing)\n\nimNothing = 10\n\nprint(imNothing)\n</code></pre>   <pre><code>03:49:43.359  10  -  Server - Script:6\n03:49:43.359  Hi!  -  Server - Script:7\n03:49:43.359  true  -  Server - Script:8\n03:49:43.359  nil  -  Server - Script:9\n03:49:43.359  10  -  Server - Script:13\n</code></pre>    <p>We can see that the first time we print the <code>imNothing</code> variable, <code>nil</code> is output, but once we reassign it to <code>10</code>, and print it again, <code>10</code> is now output.</p>","title":"Reassigning Variables"},{"location":"courses/scripting/introduction-to-scripting/variables/#scope","text":"<p>There are two types of scopes in Lua, Global and Local. Currently, all the variables we created are of the global scope, which 99.9% of the time is not what you want.</p>","title":"Scope"},{"location":"courses/scripting/introduction-to-scripting/variables/#local","text":"<p>Whenever we create a new variable, before typing the name, we should type the keyword <code>local</code>. Here's an example of how it should be written <code>local newVariable = 1</code>. We used the keyword <code>local</code> to specify the variable's scope.</p> <p>There is more to scope than just including a keyword when creating a variable. Although we haven't learned about <code>if-statements</code>, <code>functions</code>, or <code>loops</code> yet, these will be commonly used while you code. When thinking about the scope, think of containers or boxes which can hold things inside of them.</p>  <p></p>  <p>Let's break apart the image above:</p> <ul> <li>We create <code>variable1</code> in Container 0</li> <li> <p>We use <code>variable1</code> in Container 0 with the <code>print()</code> function</p> </li> <li> <p>We then use an <code>if-statement</code> in Container 0, which now creates Container 1</p> </li> <li>We create <code>variable2</code> in Container 1</li> <li> <p>We use <code>variable1</code> &amp; <code>variable2</code> in Container 1 with the <code>print()</code> function</p> </li> <li> <p>We then use an <code>if-statement</code> in Container 1, which now creates Container 2</p> </li> <li>We create <code>variable3</code> in Container 2</li> <li>We use <code>variable1</code>, <code>variable2</code>, &amp; <code>variable3</code> in Container 2 with the <code>print()</code> function</li> </ul> <p>So remember, everytime we use an <code>if-statement</code>, we basically create a container inside of another container. The important lesson to understand is that each container can access variables that are inside the same container OR in previous containers!</p> <p>That might seem confusing, but let's use the image to better understand:</p> <ul> <li><code>variable1</code> is created in Container 0 and can be used within Container 0, Container 1 &amp; Container 2</li> <li><code>variable2</code> is created in Container 1 and can be used within Container 1 &amp; Container 2, but not Container 0</li> <li><code>variable3</code> is created in Container 2 and can be used within Container 2, but not Container 0 or Container 1</li> </ul> <p>So local variables can be used within the same container they were created in and containers within their container. They cannot be used in containers outside of the one they were created in.</p>","title":"Local"},{"location":"courses/scripting/introduction-to-scripting/variables/#global","text":"<p>As originally stated, you most likely should never create Global scoped variables. With that being said, the reason you should learn about the Global scope is to get a better understanding and easily differentiate between Local &amp; Global.</p> <p>Instead of using the keyword <code>local</code> before the variable's name, you do not include any keywords. Here's an example of how it would be written <code>newVariable = 1</code>. Since we didn't specify the local scope with the <code>local</code> keyword, it's automatically assumed to be global.</p>  <p></p>  <p>The image above looks similar to the one we saw in the Local lesson, but this time we use Global scoped variables. The containers are the same, but instead of variables being only accessible from their own containers and containers within their container, they can now be accessed from every container!</p> <p>This is why the <code>print()</code> functions no longer have yellow squiggly lines which indicate an error. The <code>print()</code> functions in Container 0 are able to print <code>variable2</code> &amp; <code>variable3</code>, which aren't created within Container 0.</p> <p>You should almost never use Global scope on variables since they can be modified in more locations, it becomes hard to keep track of where changes are made. You might think the Global scope provides benefits over Local, which in some ways it does, but those do not outweigh the negatives.</p>","title":"Global"},{"location":"courses/scripting/introduction-to-scripting/variables/#what-we-learned","text":"<p>What we Learned</p> <ul> <li>What a variable is</li> <li>How to name a variable</li> <li>Which naming convention to use for naming variables</li> <li>How to give a variable a value</li> <li>How to private a variable's value</li> <li>How to reassign a variable to a different value</li> <li>What a scope is</li> <li>The different types of scopes</li> <li>Which scope variables should almost always be</li> </ul>","title":"What we Learned"},{"location":"handbook/","text":"<p>This handbook is meant to swiftly cover different aspects of programming with Luau in the Roblox environment. This is certainly a source you could learn from but is meant to be used more as a reference.</p> <p>If you're looking for a Course to primarily learn from, which will hold you hand and really guide you, explore our Scripting Course!</p> <p>The handbook is slightly inspired by The TypeScript Handbook.</p>","title":"The Roblox Scripting (Luau) Handbook"},{"location":"handbook/getting-help/","text":"<p>Finding a place where you can ask questions and receive answers to your problems is one of the best ways to drastically increase your learning process!</p>","title":"Getting Help"},{"location":"handbook/getting-help/#the-problem-solving-process","text":"<p>Let's go over a simple process to follow each time you run into an issue!</p>","title":"The Problem Solving Process"},{"location":"handbook/getting-help/#1-identify-your-issue","text":"<p>It might sound simple, but you should be able to directly identify and articulate the issue you're having. You'll find this challenging if you're a new Developer, but as you put in more time, you'll eventually be able to easily articulate your exact issue.</p> <p>I'd recommend checking out our Debugging Guide to help with identifying your issue!</p>","title":"1. Identify your Issue"},{"location":"handbook/getting-help/#2-google","text":"<p>Learning how to properly Google Search a topic is an extremely useful skill, especially when it comes to solving problems!</p> <p>Considering the size of the Roblox Developer community, there's a huge chance that people have already run into the same problem you're currently stuck with, or have even had the same question about how to create a specific system.</p> <p>To improve your searches, I'd recommend adding the word(s) \"Roblox\" or \"Roblox Dev\" at the end of your question. This will usually only bring up results directly related to Roblox Development.</p> <p>Here are a few of my past searches, which might give you an idea of how to improve:</p> <ul> <li>\"spectate camera roblox dev\"</li> <li>\"roblox random decimal\"</li> <li>\"prevent player from moving roblox\"</li> </ul> <p>If you're unable to find answers to your question, you might want to consider another way of asking the question. It sounds odd, but rephrasing the question can have drastically different results!</p>","title":"2. Google"},{"location":"handbook/getting-help/#3-discord-communities","text":"<p>Once you've put in the work of researching your issue and still haven't found any solutions, it's time to ask the question in one of the community Discords. The best part about the community Discords is you'll usually get a quick response and can ask for an explanation or further questions.</p> <p>Usually, there is a channel called <code>#Scripting-Help</code>, <code>#Coding-Help</code>, or something similar in these Discords meant for asking your questions. Here are a few recommended Discords:</p> <ul> <li>Learn Roblox</li> <li>Hidden Devs</li> <li>Roblox Studio Community</li> <li>Ro Devs</li> </ul>","title":"3. Discord Communities"},{"location":"handbook/getting-help/#4-the-developer-forum","text":"<p>Posting on the Developer Forum is usually my last resort whenever I'm still unable to solve an issue. My issues usually get solved in the Google stage and if they don't Discord usually takes care of it. Whenever I use the Developer Forum, it's usually for something extremely niche like a question about a specific Library. You can certainly use it for more broad questions though.</p> <p>Depending on the question, the response rate can be slow, compared to Discord, but you're very likely to get a response. With Discord, your questions can get lost if they aren't responded to quickly, but this usually isn't the case on the Developer Forums.</p>","title":"4. The Developer Forum"},{"location":"handbook/getting-help/#how-to-ask-for-help","text":"<p>Understanding how to ask for help is a very important lesson that everyone needs to learn when they begin programming. It's common for beginners to ask questions in ways that make it impossible for anyone to help them because of the lack of detail and necessary information.</p> <p>The key to having your questions answered is to make it as easy as possible for others to help you!</p> <p>Let's review a few questions and discuss how we can improve them.</p>","title":"How to Ask For Help"},{"location":"handbook/getting-help/#example-1","text":"<p>Bad</p> <p>guys pls help, so i did a script and animation for my sword but for some reason it wont let me attack, the script is right, can you guys try to help and find a solution, thanks!</p>  <ul> <li>Didn't include any Scripts or code for other people to review</li> <li>Wasn't specific enough about what \"attack\" means</li> </ul> <p>The user should've provided their Script or at least lines of code which handle the attack. They should've also specified what \"attack\" means, is the animation not playing, or is the enemy not taking damage? You do not want to leave any room for questions or assumptions about your question.</p>  <p>Good</p> <p>Hey, I want my Sword to play an Animation each time a Player Right-Clicks while holding it. My issue is that the Animation isn't playing. I can confirm that Right-Clicking is being triggered by calling a print there. <pre><code>Paste lines from the script here, which handle the Right-Click\n</code></pre></p>","title":"Example #1"},{"location":"handbook/getting-help/#example-2","text":"<p>Bad</p> <p>help my leaderstats broke <pre><code>Includes entire long script\n</code></pre></p>  <ul> <li>The question appears very low effort</li> <li>Wasn't specific enough about what is \"broke\"</li> <li>Included their entire Script</li> </ul> <p>Although I previously said you should include your Script when asking for help, there can be exceptions. You should prioritize including code relevant to your issue. This is very common among new Developers who might not know where their issue stems from. Either way including too much information is better than not including enough!</p>  <p>Good</p> <p>Hey, I'm having an issue with my leaderstats. Whenever I start my Game, I'm unable to see the leaderboard popup at the top-right of the screen. <pre><code>Paste lines from the script here, which handle creating the Leaderstats\n</code></pre></p>","title":"Example #2"},{"location":"handbook/getting-help/#discord","text":"<p>Here are a few tips to improve your communication skills and increase response rates in Discord:</p>","title":"Discord"},{"location":"handbook/getting-help/#use-code-blocks","text":"<p>You should always paste your code into a Code Block when using Discord. You can see an example of how to do this below:</p> ExampleOutput   <pre><code>```lua\n    print(\"This is an example\")\n    if true then\n        print(\"Nicely formatted!\")\n    end\u200e```\n</code></pre>   <pre><code>print(\"This is an example\")\nif true then\n    print(\"Nicely formatted!\")\nend\n</code></pre>    <p>If you're still unsure of how this is done, while writing a Discord message do the following:</p> <ol> <li>Use Shift+Enter to create a new line</li> <li>Type three backticks (```)</li> <li>On the same line as the three backticks type <code>lua</code> (Make sure there is no space between the backticks and the word)</li> <li>Use Shift+Enter to create a new line</li> <li>Paste the code</li> <li>At the end of the last line of your code type three backticks (```)</li> </ol> <p>You can learn more about Markdown on Discord here!</p>","title":"Use Code Blocks"},{"location":"handbook/getting-help/#use-multiple-discords","text":"<p>If you're experiencing difficulties getting a response to your question in one Discord, try proposing your question in multiple!</p> <p>Whenever I ask a question in a Discord, I usually copy/paste it to multiple servers. One of the main reasons I do this is because it increases the amount of people seeing your question, directly increasing your chances of getting an answer, and if you only ask in one Server, there might not be anybody there who has an answer or is willing to help you.</p> <p>Once you get an answer to your question, it's important to go back to the other Discords where you posted that question and delete it, so others don't waste time on your already answered question.</p> <p>If you missed it earlier, you can view our recommended Discord Servers!</p>","title":"Use Multiple Discords"},{"location":"handbook/the-basics/","text":"<p>We'll cover most of the core concepts of Luau and Roblox Development.</p>","title":"The Basics"},{"location":"handbook/the-basics/#variables","text":"<p>Variables are written in the following format: <code>local nameOfVariable = \"valueOfVariable\"</code>.</p> <ul> <li>local is the scope of the variable.</li> <li>nameofVariable is the name of the variable.</li> <li>\"valueOfVariable\" is the value of the variable.</li> </ul>","title":"Variables"},{"location":"handbook/the-basics/#types","text":"<p>A variable's type is based off its value. The type of a variable is important as it enables you to know how you can use that variable. For instance, you can only perform math operations on two number variables.</p>","title":"Types"},{"location":"handbook/the-basics/#primitive-types","text":"<p>These types are standard Luau types, which are also commonly shared with other programming languages.</p>    Type Example Info     <code>string</code> \"StringType\" Characters surrounded by <code>\"</code>s   <code>number</code> 10.5 Any number including whole numbers &amp; decimals   <code>boolean</code> true <code>true</code> or <code>false</code>, Similar to yes or no   <code>table</code> { } Array or Dictionary   <code>function</code> function() A function   <code>nil</code> <code></code> It means \"nothing\" or \"does not exist\"    <p>There is also userdata &amp; thread, but you'll likely never use these types.</p>","title":"Primitive Types"},{"location":"handbook/the-basics/#string","text":"<p>You can combine two strings using two <code>.</code>s between the strings.</p> ExampleOutput   <pre><code>local newString = \"Hey I'm\"..\" pretty cool!\"\nprint(newString)\n</code></pre>   <p>Hey I'm pretty cool!</p>","title":"String"},{"location":"handbook/the-basics/#number","text":"<p>You can do math with two numbers by using any arithmetic symbols between the numbers.</p> ExampleOutput   <pre><code>local newMath = 5 + 10\nprint(newMath)\n</code></pre>   <p>15</p>","title":"Number"},{"location":"handbook/the-basics/#boolean","text":"<p>You can use a conditional statement to create a boolean.</p> ExampleOutput   <pre><code>local newBool = 5 + 10 == 15\nprint(newBool)\n</code></pre>   <p>true</p>","title":"Boolean"},{"location":"handbook/the-basics/#roblox-types","text":"<p>Roblox adjusts their plethora of custom types often, but you always view the most up to date list here!</p>","title":"Roblox Types"},{"location":"handbook/the-basics/#examples","text":"","title":"Examples"},{"location":"handbook/the-basics/#simple","text":"<pre><code>local numberVariable = 10\nlocal stringVariable = \"100\"\nlocal booleanVariable = true\nlocal nilVariable = nil\nlocal nilVariable2\nlocal tableArrayVariable = {\"2\", 3, true}\nlocal tableDictionaryVariable = {first = \"2\", 2 = \"3rd\", third = \"two\"}\n</code></pre>","title":"Simple"},{"location":"handbook/the-basics/#advanced","text":"<pre><code>local numberVariable = 1_000\nlocal stringVariable = \"100\"..\" and two\"\nlocal booleanVariable = numberVariable == 1_000\nlocal nilVariable = nil\nlocal nilVariable2 = nilVariable or nil\n</code></pre>","title":"Advanced"},{"location":"handbook/the-basics/#conditional-statements","text":"","title":"Conditional Statements"}]}